/* tslint:disable */
/* eslint-disable */
/**
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.19
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../../configuration';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
import FormData from 'form-data'
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../base';
// @ts-ignore
import { CreateIssuedDocumentRequest } from '../../src/models';
// @ts-ignore
import { CreateIssuedDocumentResponse } from '../../src/models';
// @ts-ignore
import { GetEmailDataResponse } from '../../src/models';
// @ts-ignore
import { GetExistingIssuedDocumentTotalsRequest } from '../../src/models';
// @ts-ignore
import { GetExistingIssuedDocumentTotalsResponse } from '../../src/models';
// @ts-ignore
import { GetIssuedDocumentPreCreateInfoResponse } from '../../src/models';
// @ts-ignore
import { GetIssuedDocumentResponse } from '../../src/models';
// @ts-ignore
import { GetNewIssuedDocumentTotalsRequest } from '../../src/models';
// @ts-ignore
import { GetNewIssuedDocumentTotalsResponse } from '../../src/models';
// @ts-ignore
import { ListIssuedDocumentsResponse } from '../../src/models';
// @ts-ignore
import { ModifyIssuedDocumentRequest } from '../../src/models';
// @ts-ignore
import { ModifyIssuedDocumentResponse } from '../../src/models';
// @ts-ignore
import { ScheduleEmailRequest } from '../../src/models';
// @ts-ignore
import { UploadIssuedDocumentAttachmentResponse } from '../../src/models';
/**
 * IssuedDocumentsApi - axios parameter creator
 * @export
 */
export const IssuedDocumentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new document.
         * @summary Create Issued Document
         * @param {number} companyId The ID of the company.
         * @param {CreateIssuedDocumentRequest} [createIssuedDocumentRequest] The Issued Document
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIssuedDocument: async (companyId: number, createIssuedDocumentRequest?: CreateIssuedDocumentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('createIssuedDocument', 'companyId', companyId)
            const localVarPath = `/c/{company_id}/issued_documents`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", ["issued_documents.invoices:a", "issued_documents.credit_notes:a", "issued_documents.receipts:a", "issued_documents.orders:a", "issued_documents.quotes:a", "issued_documents.proformas:a", "issued_documents.delivery_notes:a"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['User-Agent'] = 'FattureInCloud/2.0.4/TypeScript-SDK';


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createIssuedDocumentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the specified document.
         * @summary Delete Issued Document
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIssuedDocument: async (companyId: number, documentId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteIssuedDocument', 'companyId', companyId)
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('deleteIssuedDocument', 'documentId', documentId)
            const localVarPath = `/c/{company_id}/issued_documents/{document_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"document_id"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", ["issued_documents.invoices:a", "issued_documents.credit_notes:a", "issued_documents.receipts:a", "issued_documents.orders:a", "issued_documents.quotes:a", "issued_documents.proformas:a", "issued_documents.delivery_notes:a"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes the attachment of the specified document.
         * @summary Delete Issued Document Attachment
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIssuedDocumentAttachment: async (companyId: number, documentId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteIssuedDocumentAttachment', 'companyId', companyId)
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('deleteIssuedDocumentAttachment', 'documentId', documentId)
            const localVarPath = `/c/{company_id}/issued_documents/{document_id}/attachment`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"document_id"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the pre-compiled email details.
         * @summary Get Email Data
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailData: async (companyId: number, documentId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getEmailData', 'companyId', companyId)
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('getEmailData', 'documentId', documentId)
            const localVarPath = `/c/{company_id}/issued_documents/{document_id}/email`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"document_id"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", ["issued_documents.invoices:r", "issued_documents.credit_notes:r", "issued_documents.receipts:r", "issued_documents.orders:r", "issued_documents.quotes:r", "issued_documents.proformas:r", "issued_documents.delivery_notes:r"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the totals for a specified document.
         * @summary Get Existing Issued Document Totals
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {GetExistingIssuedDocumentTotalsRequest} [getExistingIssuedDocumentTotalsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExistingIssuedDocumentTotals: async (companyId: number, documentId: number, getExistingIssuedDocumentTotalsRequest?: GetExistingIssuedDocumentTotalsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getExistingIssuedDocumentTotals', 'companyId', companyId)
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('getExistingIssuedDocumentTotals', 'documentId', documentId)
            const localVarPath = `/c/{company_id}/issued_documents/{document_id}/totals`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"document_id"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['User-Agent'] = 'FattureInCloud/2.0.4/TypeScript-SDK';


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getExistingIssuedDocumentTotalsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the specified document. 
         * @summary Get Issued Document
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {string} [fields] List of comma-separated fields.
         * @param {'basic' | 'detailed'} [fieldset] Name of the fieldset.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIssuedDocument: async (companyId: number, documentId: number, fields?: string, fieldset?: 'basic' | 'detailed', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getIssuedDocument', 'companyId', companyId)
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('getIssuedDocument', 'documentId', documentId)
            const localVarPath = `/c/{company_id}/issued_documents/{document_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"document_id"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", ["issued_documents.invoices:r", "issued_documents.credit_notes:r", "issued_documents.receipts:r", "issued_documents.orders:r", "issued_documents.quotes:r", "issued_documents.proformas:r", "issued_documents.delivery_notes:r"], configuration)

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (fieldset !== undefined) {
                localVarQueryParameter['fieldset'] = fieldset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the information useful while creating a new document.
         * @summary Get Issued Document Pre-create info
         * @param {number} companyId The ID of the company.
         * @param {'invoice' | 'quote' | 'proforma' | 'receipt' | 'delivery_note' | 'credit_note' | 'order' | 'work_report' | 'supplier_order' | 'self_own_invoice' | 'self_supplier_invoice'} type The type of the issued document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIssuedDocumentPreCreateInfo: async (companyId: number, type: 'invoice' | 'quote' | 'proforma' | 'receipt' | 'delivery_note' | 'credit_note' | 'order' | 'work_report' | 'supplier_order' | 'self_own_invoice' | 'self_supplier_invoice', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getIssuedDocumentPreCreateInfo', 'companyId', companyId)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('getIssuedDocumentPreCreateInfo', 'type', type)
            const localVarPath = `/c/{company_id}/issued_documents/info`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", [], configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the totals for a new document.
         * @summary Get New Issued Document Totals
         * @param {number} companyId The ID of the company.
         * @param {GetNewIssuedDocumentTotalsRequest} [getNewIssuedDocumentTotalsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNewIssuedDocumentTotals: async (companyId: number, getNewIssuedDocumentTotalsRequest?: GetNewIssuedDocumentTotalsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getNewIssuedDocumentTotals', 'companyId', companyId)
            const localVarPath = `/c/{company_id}/issued_documents/totals`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['User-Agent'] = 'FattureInCloud/2.0.4/TypeScript-SDK';


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getNewIssuedDocumentTotalsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the issued documents.
         * @summary List Issued Documents
         * @param {number} companyId The ID of the company.
         * @param {'invoice' | 'quote' | 'proforma' | 'receipt' | 'delivery_note' | 'credit_note' | 'order' | 'work_report' | 'supplier_order' | 'self_own_invoice' | 'self_supplier_invoice'} type The type of the issued document.
         * @param {string} [fields] List of comma-separated fields.
         * @param {'basic' | 'detailed'} [fieldset] Name of the fieldset.
         * @param {string} [sort] List of comma-separated fields for result sorting (minus for desc sorting).
         * @param {number} [page] The page to retrieve.
         * @param {number} [perPage] The size of the page.
         * @param {string} [q] Query for filtering the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listIssuedDocuments: async (companyId: number, type: 'invoice' | 'quote' | 'proforma' | 'receipt' | 'delivery_note' | 'credit_note' | 'order' | 'work_report' | 'supplier_order' | 'self_own_invoice' | 'self_supplier_invoice', fields?: string, fieldset?: 'basic' | 'detailed', sort?: string, page?: number, perPage?: number, q?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listIssuedDocuments', 'companyId', companyId)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('listIssuedDocuments', 'type', type)
            const localVarPath = `/c/{company_id}/issued_documents`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", ["issued_documents.invoices:r", "issued_documents.credit_notes:r", "issued_documents.receipts:r", "issued_documents.orders:r", "issued_documents.quotes:r", "issued_documents.proformas:r", "issued_documents.delivery_notes:r"], configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (fieldset !== undefined) {
                localVarQueryParameter['fieldset'] = fieldset;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modifies the specified document.
         * @summary Modify Issued Document
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {ModifyIssuedDocumentRequest} [modifyIssuedDocumentRequest] The modified document
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyIssuedDocument: async (companyId: number, documentId: number, modifyIssuedDocumentRequest?: ModifyIssuedDocumentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('modifyIssuedDocument', 'companyId', companyId)
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('modifyIssuedDocument', 'documentId', documentId)
            const localVarPath = `/c/{company_id}/issued_documents/{document_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"document_id"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", ["issued_documents.invoices:a", "issued_documents.credit_notes:a", "issued_documents.receipts:a", "issued_documents.orders:a", "issued_documents.quotes:a", "issued_documents.proformas:a", "issued_documents.delivery_notes:a"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['User-Agent'] = 'FattureInCloud/2.0.4/TypeScript-SDK';


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyIssuedDocumentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Schedules the sending of a document by email.
         * @summary Schedule Email
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {ScheduleEmailRequest} [scheduleEmailRequest] Email Schedule
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scheduleEmail: async (companyId: number, documentId: number, scheduleEmailRequest?: ScheduleEmailRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('scheduleEmail', 'companyId', companyId)
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('scheduleEmail', 'documentId', documentId)
            const localVarPath = `/c/{company_id}/issued_documents/{document_id}/email`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"document_id"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", ["issued_documents.invoices:r", "issued_documents.credit_notes:r", "issued_documents.receipts:r", "issued_documents.orders:r", "issued_documents.quotes:r", "issued_documents.proformas:r", "issued_documents.delivery_notes:r"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['User-Agent'] = 'FattureInCloud/2.0.4/TypeScript-SDK';


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(scheduleEmailRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Uploads an attachment destined to an issued document. The actual association between the document and the attachment must be implemented separately, using the returned token.
         * @summary Upload Issued Document Attachment
         * @param {number} companyId The ID of the company.
         * @param {string} [filename] Name of the file.
         * @param {any} [attachment] Valid format: .png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadIssuedDocumentAttachment: async (companyId: number, filename?: string, attachment?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('uploadIssuedDocumentAttachment', 'companyId', companyId)
            const localVarPath = `/c/{company_id}/issued_documents/attachment`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", [], configuration)


            if (filename !== undefined) { 
                localVarFormParams.append('filename', filename as any);
            }
    
            if (attachment !== undefined) { 
                localVarFormParams.append('attachment', attachment as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...(localVarFormParams as any).getHeaders?.(), ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IssuedDocumentsApi - functional programming interface
 * @export
 */
export const IssuedDocumentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IssuedDocumentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new document.
         * @summary Create Issued Document
         * @param {number} companyId The ID of the company.
         * @param {CreateIssuedDocumentRequest} [createIssuedDocumentRequest] The Issued Document
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createIssuedDocument(companyId: number, createIssuedDocumentRequest?: CreateIssuedDocumentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateIssuedDocumentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createIssuedDocument(companyId, createIssuedDocumentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes the specified document.
         * @summary Delete Issued Document
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteIssuedDocument(companyId: number, documentId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteIssuedDocument(companyId, documentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes the attachment of the specified document.
         * @summary Delete Issued Document Attachment
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteIssuedDocumentAttachment(companyId: number, documentId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteIssuedDocumentAttachment(companyId, documentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets the pre-compiled email details.
         * @summary Get Email Data
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmailData(companyId: number, documentId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetEmailDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmailData(companyId, documentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the totals for a specified document.
         * @summary Get Existing Issued Document Totals
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {GetExistingIssuedDocumentTotalsRequest} [getExistingIssuedDocumentTotalsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExistingIssuedDocumentTotals(companyId: number, documentId: number, getExistingIssuedDocumentTotalsRequest?: GetExistingIssuedDocumentTotalsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetExistingIssuedDocumentTotalsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExistingIssuedDocumentTotals(companyId, documentId, getExistingIssuedDocumentTotalsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets the specified document. 
         * @summary Get Issued Document
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {string} [fields] List of comma-separated fields.
         * @param {'basic' | 'detailed'} [fieldset] Name of the fieldset.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIssuedDocument(companyId: number, documentId: number, fields?: string, fieldset?: 'basic' | 'detailed', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetIssuedDocumentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIssuedDocument(companyId, documentId, fields, fieldset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the information useful while creating a new document.
         * @summary Get Issued Document Pre-create info
         * @param {number} companyId The ID of the company.
         * @param {'invoice' | 'quote' | 'proforma' | 'receipt' | 'delivery_note' | 'credit_note' | 'order' | 'work_report' | 'supplier_order' | 'self_own_invoice' | 'self_supplier_invoice'} type The type of the issued document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIssuedDocumentPreCreateInfo(companyId: number, type: 'invoice' | 'quote' | 'proforma' | 'receipt' | 'delivery_note' | 'credit_note' | 'order' | 'work_report' | 'supplier_order' | 'self_own_invoice' | 'self_supplier_invoice', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetIssuedDocumentPreCreateInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIssuedDocumentPreCreateInfo(companyId, type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the totals for a new document.
         * @summary Get New Issued Document Totals
         * @param {number} companyId The ID of the company.
         * @param {GetNewIssuedDocumentTotalsRequest} [getNewIssuedDocumentTotalsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNewIssuedDocumentTotals(companyId: number, getNewIssuedDocumentTotalsRequest?: GetNewIssuedDocumentTotalsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetNewIssuedDocumentTotalsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNewIssuedDocumentTotals(companyId, getNewIssuedDocumentTotalsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists the issued documents.
         * @summary List Issued Documents
         * @param {number} companyId The ID of the company.
         * @param {'invoice' | 'quote' | 'proforma' | 'receipt' | 'delivery_note' | 'credit_note' | 'order' | 'work_report' | 'supplier_order' | 'self_own_invoice' | 'self_supplier_invoice'} type The type of the issued document.
         * @param {string} [fields] List of comma-separated fields.
         * @param {'basic' | 'detailed'} [fieldset] Name of the fieldset.
         * @param {string} [sort] List of comma-separated fields for result sorting (minus for desc sorting).
         * @param {number} [page] The page to retrieve.
         * @param {number} [perPage] The size of the page.
         * @param {string} [q] Query for filtering the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listIssuedDocuments(companyId: number, type: 'invoice' | 'quote' | 'proforma' | 'receipt' | 'delivery_note' | 'credit_note' | 'order' | 'work_report' | 'supplier_order' | 'self_own_invoice' | 'self_supplier_invoice', fields?: string, fieldset?: 'basic' | 'detailed', sort?: string, page?: number, perPage?: number, q?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListIssuedDocumentsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listIssuedDocuments(companyId, type, fields, fieldset, sort, page, perPage, q, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Modifies the specified document.
         * @summary Modify Issued Document
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {ModifyIssuedDocumentRequest} [modifyIssuedDocumentRequest] The modified document
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyIssuedDocument(companyId: number, documentId: number, modifyIssuedDocumentRequest?: ModifyIssuedDocumentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyIssuedDocumentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyIssuedDocument(companyId, documentId, modifyIssuedDocumentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Schedules the sending of a document by email.
         * @summary Schedule Email
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {ScheduleEmailRequest} [scheduleEmailRequest] Email Schedule
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scheduleEmail(companyId: number, documentId: number, scheduleEmailRequest?: ScheduleEmailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scheduleEmail(companyId, documentId, scheduleEmailRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Uploads an attachment destined to an issued document. The actual association between the document and the attachment must be implemented separately, using the returned token.
         * @summary Upload Issued Document Attachment
         * @param {number} companyId The ID of the company.
         * @param {string} [filename] Name of the file.
         * @param {any} [attachment] Valid format: .png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadIssuedDocumentAttachment(companyId: number, filename?: string, attachment?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadIssuedDocumentAttachmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadIssuedDocumentAttachment(companyId, filename, attachment, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IssuedDocumentsApi - factory interface
 * @export
 */
export const IssuedDocumentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IssuedDocumentsApiFp(configuration)
    return {
        /**
         * Creates a new document.
         * @summary Create Issued Document
         * @param {number} companyId The ID of the company.
         * @param {CreateIssuedDocumentRequest} [createIssuedDocumentRequest] The Issued Document
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIssuedDocument(companyId: number, createIssuedDocumentRequest?: CreateIssuedDocumentRequest, options?: any): AxiosPromise<CreateIssuedDocumentResponse> {
            return localVarFp.createIssuedDocument(companyId, createIssuedDocumentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes the specified document.
         * @summary Delete Issued Document
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIssuedDocument(companyId: number, documentId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteIssuedDocument(companyId, documentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes the attachment of the specified document.
         * @summary Delete Issued Document Attachment
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIssuedDocumentAttachment(companyId: number, documentId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteIssuedDocumentAttachment(companyId, documentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the pre-compiled email details.
         * @summary Get Email Data
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailData(companyId: number, documentId: number, options?: any): AxiosPromise<GetEmailDataResponse> {
            return localVarFp.getEmailData(companyId, documentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the totals for a specified document.
         * @summary Get Existing Issued Document Totals
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {GetExistingIssuedDocumentTotalsRequest} [getExistingIssuedDocumentTotalsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExistingIssuedDocumentTotals(companyId: number, documentId: number, getExistingIssuedDocumentTotalsRequest?: GetExistingIssuedDocumentTotalsRequest, options?: any): AxiosPromise<GetExistingIssuedDocumentTotalsResponse> {
            return localVarFp.getExistingIssuedDocumentTotals(companyId, documentId, getExistingIssuedDocumentTotalsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the specified document. 
         * @summary Get Issued Document
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {string} [fields] List of comma-separated fields.
         * @param {'basic' | 'detailed'} [fieldset] Name of the fieldset.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIssuedDocument(companyId: number, documentId: number, fields?: string, fieldset?: 'basic' | 'detailed', options?: any): AxiosPromise<GetIssuedDocumentResponse> {
            return localVarFp.getIssuedDocument(companyId, documentId, fields, fieldset, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the information useful while creating a new document.
         * @summary Get Issued Document Pre-create info
         * @param {number} companyId The ID of the company.
         * @param {'invoice' | 'quote' | 'proforma' | 'receipt' | 'delivery_note' | 'credit_note' | 'order' | 'work_report' | 'supplier_order' | 'self_own_invoice' | 'self_supplier_invoice'} type The type of the issued document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIssuedDocumentPreCreateInfo(companyId: number, type: 'invoice' | 'quote' | 'proforma' | 'receipt' | 'delivery_note' | 'credit_note' | 'order' | 'work_report' | 'supplier_order' | 'self_own_invoice' | 'self_supplier_invoice', options?: any): AxiosPromise<GetIssuedDocumentPreCreateInfoResponse> {
            return localVarFp.getIssuedDocumentPreCreateInfo(companyId, type, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the totals for a new document.
         * @summary Get New Issued Document Totals
         * @param {number} companyId The ID of the company.
         * @param {GetNewIssuedDocumentTotalsRequest} [getNewIssuedDocumentTotalsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNewIssuedDocumentTotals(companyId: number, getNewIssuedDocumentTotalsRequest?: GetNewIssuedDocumentTotalsRequest, options?: any): AxiosPromise<GetNewIssuedDocumentTotalsResponse> {
            return localVarFp.getNewIssuedDocumentTotals(companyId, getNewIssuedDocumentTotalsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists the issued documents.
         * @summary List Issued Documents
         * @param {number} companyId The ID of the company.
         * @param {'invoice' | 'quote' | 'proforma' | 'receipt' | 'delivery_note' | 'credit_note' | 'order' | 'work_report' | 'supplier_order' | 'self_own_invoice' | 'self_supplier_invoice'} type The type of the issued document.
         * @param {string} [fields] List of comma-separated fields.
         * @param {'basic' | 'detailed'} [fieldset] Name of the fieldset.
         * @param {string} [sort] List of comma-separated fields for result sorting (minus for desc sorting).
         * @param {number} [page] The page to retrieve.
         * @param {number} [perPage] The size of the page.
         * @param {string} [q] Query for filtering the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listIssuedDocuments(companyId: number, type: 'invoice' | 'quote' | 'proforma' | 'receipt' | 'delivery_note' | 'credit_note' | 'order' | 'work_report' | 'supplier_order' | 'self_own_invoice' | 'self_supplier_invoice', fields?: string, fieldset?: 'basic' | 'detailed', sort?: string, page?: number, perPage?: number, q?: string, options?: any): AxiosPromise<ListIssuedDocumentsResponse> {
            return localVarFp.listIssuedDocuments(companyId, type, fields, fieldset, sort, page, perPage, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Modifies the specified document.
         * @summary Modify Issued Document
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {ModifyIssuedDocumentRequest} [modifyIssuedDocumentRequest] The modified document
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyIssuedDocument(companyId: number, documentId: number, modifyIssuedDocumentRequest?: ModifyIssuedDocumentRequest, options?: any): AxiosPromise<ModifyIssuedDocumentResponse> {
            return localVarFp.modifyIssuedDocument(companyId, documentId, modifyIssuedDocumentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Schedules the sending of a document by email.
         * @summary Schedule Email
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {ScheduleEmailRequest} [scheduleEmailRequest] Email Schedule
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scheduleEmail(companyId: number, documentId: number, scheduleEmailRequest?: ScheduleEmailRequest, options?: any): AxiosPromise<void> {
            return localVarFp.scheduleEmail(companyId, documentId, scheduleEmailRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Uploads an attachment destined to an issued document. The actual association between the document and the attachment must be implemented separately, using the returned token.
         * @summary Upload Issued Document Attachment
         * @param {number} companyId The ID of the company.
         * @param {string} [filename] Name of the file.
         * @param {any} [attachment] Valid format: .png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadIssuedDocumentAttachment(companyId: number, filename?: string, attachment?: any, options?: any): AxiosPromise<UploadIssuedDocumentAttachmentResponse> {
            return localVarFp.uploadIssuedDocumentAttachment(companyId, filename, attachment, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IssuedDocumentsApi - interface
 * @export
 * @interface IssuedDocumentsApi
 */
export interface IssuedDocumentsApiInterface {
    /**
     * Creates a new document.
     * @summary Create Issued Document
     * @param {number} companyId The ID of the company.
     * @param {CreateIssuedDocumentRequest} [createIssuedDocumentRequest] The Issued Document
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuedDocumentsApiInterface
     */
    createIssuedDocument(companyId: number, createIssuedDocumentRequest?: CreateIssuedDocumentRequest, options?: AxiosRequestConfig): AxiosPromise<CreateIssuedDocumentResponse>;

    /**
     * Deletes the specified document.
     * @summary Delete Issued Document
     * @param {number} companyId The ID of the company.
     * @param {number} documentId The ID of the document.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuedDocumentsApiInterface
     */
    deleteIssuedDocument(companyId: number, documentId: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Removes the attachment of the specified document.
     * @summary Delete Issued Document Attachment
     * @param {number} companyId The ID of the company.
     * @param {number} documentId The ID of the document.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuedDocumentsApiInterface
     */
    deleteIssuedDocumentAttachment(companyId: number, documentId: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Gets the pre-compiled email details.
     * @summary Get Email Data
     * @param {number} companyId The ID of the company.
     * @param {number} documentId The ID of the document.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuedDocumentsApiInterface
     */
    getEmailData(companyId: number, documentId: number, options?: AxiosRequestConfig): AxiosPromise<GetEmailDataResponse>;

    /**
     * Returns the totals for a specified document.
     * @summary Get Existing Issued Document Totals
     * @param {number} companyId The ID of the company.
     * @param {number} documentId The ID of the document.
     * @param {GetExistingIssuedDocumentTotalsRequest} [getExistingIssuedDocumentTotalsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuedDocumentsApiInterface
     */
    getExistingIssuedDocumentTotals(companyId: number, documentId: number, getExistingIssuedDocumentTotalsRequest?: GetExistingIssuedDocumentTotalsRequest, options?: AxiosRequestConfig): AxiosPromise<GetExistingIssuedDocumentTotalsResponse>;

    /**
     * Gets the specified document. 
     * @summary Get Issued Document
     * @param {number} companyId The ID of the company.
     * @param {number} documentId The ID of the document.
     * @param {string} [fields] List of comma-separated fields.
     * @param {'basic' | 'detailed'} [fieldset] Name of the fieldset.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuedDocumentsApiInterface
     */
    getIssuedDocument(companyId: number, documentId: number, fields?: string, fieldset?: 'basic' | 'detailed', options?: AxiosRequestConfig): AxiosPromise<GetIssuedDocumentResponse>;

    /**
     * Retrieves the information useful while creating a new document.
     * @summary Get Issued Document Pre-create info
     * @param {number} companyId The ID of the company.
     * @param {'invoice' | 'quote' | 'proforma' | 'receipt' | 'delivery_note' | 'credit_note' | 'order' | 'work_report' | 'supplier_order' | 'self_own_invoice' | 'self_supplier_invoice'} type The type of the issued document.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuedDocumentsApiInterface
     */
    getIssuedDocumentPreCreateInfo(companyId: number, type: 'invoice' | 'quote' | 'proforma' | 'receipt' | 'delivery_note' | 'credit_note' | 'order' | 'work_report' | 'supplier_order' | 'self_own_invoice' | 'self_supplier_invoice', options?: AxiosRequestConfig): AxiosPromise<GetIssuedDocumentPreCreateInfoResponse>;

    /**
     * Returns the totals for a new document.
     * @summary Get New Issued Document Totals
     * @param {number} companyId The ID of the company.
     * @param {GetNewIssuedDocumentTotalsRequest} [getNewIssuedDocumentTotalsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuedDocumentsApiInterface
     */
    getNewIssuedDocumentTotals(companyId: number, getNewIssuedDocumentTotalsRequest?: GetNewIssuedDocumentTotalsRequest, options?: AxiosRequestConfig): AxiosPromise<GetNewIssuedDocumentTotalsResponse>;

    /**
     * Lists the issued documents.
     * @summary List Issued Documents
     * @param {number} companyId The ID of the company.
     * @param {'invoice' | 'quote' | 'proforma' | 'receipt' | 'delivery_note' | 'credit_note' | 'order' | 'work_report' | 'supplier_order' | 'self_own_invoice' | 'self_supplier_invoice'} type The type of the issued document.
     * @param {string} [fields] List of comma-separated fields.
     * @param {'basic' | 'detailed'} [fieldset] Name of the fieldset.
     * @param {string} [sort] List of comma-separated fields for result sorting (minus for desc sorting).
     * @param {number} [page] The page to retrieve.
     * @param {number} [perPage] The size of the page.
     * @param {string} [q] Query for filtering the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuedDocumentsApiInterface
     */
    listIssuedDocuments(companyId: number, type: 'invoice' | 'quote' | 'proforma' | 'receipt' | 'delivery_note' | 'credit_note' | 'order' | 'work_report' | 'supplier_order' | 'self_own_invoice' | 'self_supplier_invoice', fields?: string, fieldset?: 'basic' | 'detailed', sort?: string, page?: number, perPage?: number, q?: string, options?: AxiosRequestConfig): AxiosPromise<ListIssuedDocumentsResponse>;

    /**
     * Modifies the specified document.
     * @summary Modify Issued Document
     * @param {number} companyId The ID of the company.
     * @param {number} documentId The ID of the document.
     * @param {ModifyIssuedDocumentRequest} [modifyIssuedDocumentRequest] The modified document
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuedDocumentsApiInterface
     */
    modifyIssuedDocument(companyId: number, documentId: number, modifyIssuedDocumentRequest?: ModifyIssuedDocumentRequest, options?: AxiosRequestConfig): AxiosPromise<ModifyIssuedDocumentResponse>;

    /**
     * Schedules the sending of a document by email.
     * @summary Schedule Email
     * @param {number} companyId The ID of the company.
     * @param {number} documentId The ID of the document.
     * @param {ScheduleEmailRequest} [scheduleEmailRequest] Email Schedule
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuedDocumentsApiInterface
     */
    scheduleEmail(companyId: number, documentId: number, scheduleEmailRequest?: ScheduleEmailRequest, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Uploads an attachment destined to an issued document. The actual association between the document and the attachment must be implemented separately, using the returned token.
     * @summary Upload Issued Document Attachment
     * @param {number} companyId The ID of the company.
     * @param {string} [filename] Name of the file.
     * @param {any} [attachment] Valid format: .png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuedDocumentsApiInterface
     */
    uploadIssuedDocumentAttachment(companyId: number, filename?: string, attachment?: any, options?: AxiosRequestConfig): AxiosPromise<UploadIssuedDocumentAttachmentResponse>;

}

/**
 * IssuedDocumentsApi - object-oriented interface
 * @export
 * @class IssuedDocumentsApi
 * @extends {BaseAPI}
 */
export class IssuedDocumentsApi extends BaseAPI implements IssuedDocumentsApiInterface {
    /**
     * Creates a new document.
     * @summary Create Issued Document
     * @param {number} companyId The ID of the company.
     * @param {CreateIssuedDocumentRequest} [createIssuedDocumentRequest] The Issued Document
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuedDocumentsApi
     */
    public createIssuedDocument(companyId: number, createIssuedDocumentRequest?: CreateIssuedDocumentRequest, options?: AxiosRequestConfig) {
        return IssuedDocumentsApiFp(this.configuration).createIssuedDocument(companyId, createIssuedDocumentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes the specified document.
     * @summary Delete Issued Document
     * @param {number} companyId The ID of the company.
     * @param {number} documentId The ID of the document.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuedDocumentsApi
     */
    public deleteIssuedDocument(companyId: number, documentId: number, options?: AxiosRequestConfig) {
        return IssuedDocumentsApiFp(this.configuration).deleteIssuedDocument(companyId, documentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes the attachment of the specified document.
     * @summary Delete Issued Document Attachment
     * @param {number} companyId The ID of the company.
     * @param {number} documentId The ID of the document.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuedDocumentsApi
     */
    public deleteIssuedDocumentAttachment(companyId: number, documentId: number, options?: AxiosRequestConfig) {
        return IssuedDocumentsApiFp(this.configuration).deleteIssuedDocumentAttachment(companyId, documentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the pre-compiled email details.
     * @summary Get Email Data
     * @param {number} companyId The ID of the company.
     * @param {number} documentId The ID of the document.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuedDocumentsApi
     */
    public getEmailData(companyId: number, documentId: number, options?: AxiosRequestConfig) {
        return IssuedDocumentsApiFp(this.configuration).getEmailData(companyId, documentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the totals for a specified document.
     * @summary Get Existing Issued Document Totals
     * @param {number} companyId The ID of the company.
     * @param {number} documentId The ID of the document.
     * @param {GetExistingIssuedDocumentTotalsRequest} [getExistingIssuedDocumentTotalsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuedDocumentsApi
     */
    public getExistingIssuedDocumentTotals(companyId: number, documentId: number, getExistingIssuedDocumentTotalsRequest?: GetExistingIssuedDocumentTotalsRequest, options?: AxiosRequestConfig) {
        return IssuedDocumentsApiFp(this.configuration).getExistingIssuedDocumentTotals(companyId, documentId, getExistingIssuedDocumentTotalsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the specified document. 
     * @summary Get Issued Document
     * @param {number} companyId The ID of the company.
     * @param {number} documentId The ID of the document.
     * @param {string} [fields] List of comma-separated fields.
     * @param {'basic' | 'detailed'} [fieldset] Name of the fieldset.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuedDocumentsApi
     */
    public getIssuedDocument(companyId: number, documentId: number, fields?: string, fieldset?: 'basic' | 'detailed', options?: AxiosRequestConfig) {
        return IssuedDocumentsApiFp(this.configuration).getIssuedDocument(companyId, documentId, fields, fieldset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the information useful while creating a new document.
     * @summary Get Issued Document Pre-create info
     * @param {number} companyId The ID of the company.
     * @param {'invoice' | 'quote' | 'proforma' | 'receipt' | 'delivery_note' | 'credit_note' | 'order' | 'work_report' | 'supplier_order' | 'self_own_invoice' | 'self_supplier_invoice'} type The type of the issued document.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuedDocumentsApi
     */
    public getIssuedDocumentPreCreateInfo(companyId: number, type: 'invoice' | 'quote' | 'proforma' | 'receipt' | 'delivery_note' | 'credit_note' | 'order' | 'work_report' | 'supplier_order' | 'self_own_invoice' | 'self_supplier_invoice', options?: AxiosRequestConfig) {
        return IssuedDocumentsApiFp(this.configuration).getIssuedDocumentPreCreateInfo(companyId, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the totals for a new document.
     * @summary Get New Issued Document Totals
     * @param {number} companyId The ID of the company.
     * @param {GetNewIssuedDocumentTotalsRequest} [getNewIssuedDocumentTotalsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuedDocumentsApi
     */
    public getNewIssuedDocumentTotals(companyId: number, getNewIssuedDocumentTotalsRequest?: GetNewIssuedDocumentTotalsRequest, options?: AxiosRequestConfig) {
        return IssuedDocumentsApiFp(this.configuration).getNewIssuedDocumentTotals(companyId, getNewIssuedDocumentTotalsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists the issued documents.
     * @summary List Issued Documents
     * @param {number} companyId The ID of the company.
     * @param {'invoice' | 'quote' | 'proforma' | 'receipt' | 'delivery_note' | 'credit_note' | 'order' | 'work_report' | 'supplier_order' | 'self_own_invoice' | 'self_supplier_invoice'} type The type of the issued document.
     * @param {string} [fields] List of comma-separated fields.
     * @param {'basic' | 'detailed'} [fieldset] Name of the fieldset.
     * @param {string} [sort] List of comma-separated fields for result sorting (minus for desc sorting).
     * @param {number} [page] The page to retrieve.
     * @param {number} [perPage] The size of the page.
     * @param {string} [q] Query for filtering the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuedDocumentsApi
     */
    public listIssuedDocuments(companyId: number, type: 'invoice' | 'quote' | 'proforma' | 'receipt' | 'delivery_note' | 'credit_note' | 'order' | 'work_report' | 'supplier_order' | 'self_own_invoice' | 'self_supplier_invoice', fields?: string, fieldset?: 'basic' | 'detailed', sort?: string, page?: number, perPage?: number, q?: string, options?: AxiosRequestConfig) {
        return IssuedDocumentsApiFp(this.configuration).listIssuedDocuments(companyId, type, fields, fieldset, sort, page, perPage, q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modifies the specified document.
     * @summary Modify Issued Document
     * @param {number} companyId The ID of the company.
     * @param {number} documentId The ID of the document.
     * @param {ModifyIssuedDocumentRequest} [modifyIssuedDocumentRequest] The modified document
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuedDocumentsApi
     */
    public modifyIssuedDocument(companyId: number, documentId: number, modifyIssuedDocumentRequest?: ModifyIssuedDocumentRequest, options?: AxiosRequestConfig) {
        return IssuedDocumentsApiFp(this.configuration).modifyIssuedDocument(companyId, documentId, modifyIssuedDocumentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Schedules the sending of a document by email.
     * @summary Schedule Email
     * @param {number} companyId The ID of the company.
     * @param {number} documentId The ID of the document.
     * @param {ScheduleEmailRequest} [scheduleEmailRequest] Email Schedule
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuedDocumentsApi
     */
    public scheduleEmail(companyId: number, documentId: number, scheduleEmailRequest?: ScheduleEmailRequest, options?: AxiosRequestConfig) {
        return IssuedDocumentsApiFp(this.configuration).scheduleEmail(companyId, documentId, scheduleEmailRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Uploads an attachment destined to an issued document. The actual association between the document and the attachment must be implemented separately, using the returned token.
     * @summary Upload Issued Document Attachment
     * @param {number} companyId The ID of the company.
     * @param {string} [filename] Name of the file.
     * @param {any} [attachment] Valid format: .png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssuedDocumentsApi
     */
    public uploadIssuedDocumentAttachment(companyId: number, filename?: string, attachment?: any, options?: AxiosRequestConfig) {
        return IssuedDocumentsApiFp(this.configuration).uploadIssuedDocumentAttachment(companyId, filename, attachment, options).then((request) => request(this.axios, this.basePath));
    }
}
