/* tslint:disable */
/* eslint-disable */
/**
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.29
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../../configuration';

import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
import FormData from 'form-data'
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../base';
// @ts-ignore
import { CreateWebhooksSubscriptionRequest } from '../../src/models';
// @ts-ignore
import { CreateWebhooksSubscriptionResponse } from '../../src/models';
// @ts-ignore
import { GetWebhooksSubscriptionResponse } from '../../src/models';
// @ts-ignore
import { ListWebhooksSubscriptionsResponse } from '../../src/models';
// @ts-ignore
import { ModifyWebhooksSubscriptionRequest } from '../../src/models';
// @ts-ignore
import { ModifyWebhooksSubscriptionResponse } from '../../src/models';
/**
 * WebhooksApi - axios parameter creator
 * @export
 */
export const WebhooksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Register some webhooks Subscriptions.
         * @summary Create a Webhook Subscription
         * @param {number} companyId The ID of the company.
         * @param {CreateWebhooksSubscriptionRequest} [createWebhooksSubscriptionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWebhooksSubscription: async (companyId: number, createWebhooksSubscriptionRequest?: CreateWebhooksSubscriptionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('createWebhooksSubscription', 'companyId', companyId)
            const localVarPath = `/c/{company_id}/subscriptions`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['User-Agent'] = 'FattureInCloud/2.0.11/TypeScript-SDK';


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createWebhooksSubscriptionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a webhooks subscription.
         * @summary Delete Webhooks Subscription
         * @param {number} companyId The ID of the company.
         * @param {string} subscriptionId The ID of the subscription.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWebhooksSubscription: async (companyId: number, subscriptionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteWebhooksSubscription', 'companyId', companyId)
            // verify required parameter 'subscriptionId' is not null or undefined
            assertParamExists('deleteWebhooksSubscription', 'subscriptionId', subscriptionId)
            const localVarPath = `/c/{company_id}/subscriptions/{subscription_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"subscription_id"}}`, encodeURIComponent(String(subscriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a webhooks subscription.
         * @summary Get Webhooks Subscription
         * @param {number} companyId The ID of the company.
         * @param {string} subscriptionId The ID of the subscription.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhooksSubscription: async (companyId: number, subscriptionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getWebhooksSubscription', 'companyId', companyId)
            // verify required parameter 'subscriptionId' is not null or undefined
            assertParamExists('getWebhooksSubscription', 'subscriptionId', subscriptionId)
            const localVarPath = `/c/{company_id}/subscriptions/{subscription_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"subscription_id"}}`, encodeURIComponent(String(subscriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List active webhooks subscriptions.
         * @summary List Webhooks Subscriptions
         * @param {number} companyId The ID of the company.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWebhooksSubscriptions: async (companyId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listWebhooksSubscriptions', 'companyId', companyId)
            const localVarPath = `/c/{company_id}/subscriptions`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit a webhooks subscription.
         * @summary Modify Webhooks Subscription
         * @param {number} companyId The ID of the company.
         * @param {string} subscriptionId The ID of the subscription.
         * @param {ModifyWebhooksSubscriptionRequest} [modifyWebhooksSubscriptionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyWebhooksSubscription: async (companyId: number, subscriptionId: string, modifyWebhooksSubscriptionRequest?: ModifyWebhooksSubscriptionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('modifyWebhooksSubscription', 'companyId', companyId)
            // verify required parameter 'subscriptionId' is not null or undefined
            assertParamExists('modifyWebhooksSubscription', 'subscriptionId', subscriptionId)
            const localVarPath = `/c/{company_id}/subscriptions/{subscription_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"subscription_id"}}`, encodeURIComponent(String(subscriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['User-Agent'] = 'FattureInCloud/2.0.11/TypeScript-SDK';


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyWebhooksSubscriptionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WebhooksApi - functional programming interface
 * @export
 */
export const WebhooksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WebhooksApiAxiosParamCreator(configuration)
    return {
        /**
         * Register some webhooks Subscriptions.
         * @summary Create a Webhook Subscription
         * @param {number} companyId The ID of the company.
         * @param {CreateWebhooksSubscriptionRequest} [createWebhooksSubscriptionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createWebhooksSubscription(companyId: number, createWebhooksSubscriptionRequest?: CreateWebhooksSubscriptionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateWebhooksSubscriptionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWebhooksSubscription(companyId, createWebhooksSubscriptionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a webhooks subscription.
         * @summary Delete Webhooks Subscription
         * @param {number} companyId The ID of the company.
         * @param {string} subscriptionId The ID of the subscription.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWebhooksSubscription(companyId: number, subscriptionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWebhooksSubscription(companyId, subscriptionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a webhooks subscription.
         * @summary Get Webhooks Subscription
         * @param {number} companyId The ID of the company.
         * @param {string} subscriptionId The ID of the subscription.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWebhooksSubscription(companyId: number, subscriptionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetWebhooksSubscriptionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWebhooksSubscription(companyId, subscriptionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List active webhooks subscriptions.
         * @summary List Webhooks Subscriptions
         * @param {number} companyId The ID of the company.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listWebhooksSubscriptions(companyId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListWebhooksSubscriptionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listWebhooksSubscriptions(companyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Edit a webhooks subscription.
         * @summary Modify Webhooks Subscription
         * @param {number} companyId The ID of the company.
         * @param {string} subscriptionId The ID of the subscription.
         * @param {ModifyWebhooksSubscriptionRequest} [modifyWebhooksSubscriptionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyWebhooksSubscription(companyId: number, subscriptionId: string, modifyWebhooksSubscriptionRequest?: ModifyWebhooksSubscriptionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyWebhooksSubscriptionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyWebhooksSubscription(companyId, subscriptionId, modifyWebhooksSubscriptionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WebhooksApi - factory interface
 * @export
 */
export const WebhooksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WebhooksApiFp(configuration)
    return {
        /**
         * Register some webhooks Subscriptions.
         * @summary Create a Webhook Subscription
         * @param {number} companyId The ID of the company.
         * @param {CreateWebhooksSubscriptionRequest} [createWebhooksSubscriptionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWebhooksSubscription(companyId: number, createWebhooksSubscriptionRequest?: CreateWebhooksSubscriptionRequest, options?: any): AxiosPromise<CreateWebhooksSubscriptionResponse> {
            return localVarFp.createWebhooksSubscription(companyId, createWebhooksSubscriptionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a webhooks subscription.
         * @summary Delete Webhooks Subscription
         * @param {number} companyId The ID of the company.
         * @param {string} subscriptionId The ID of the subscription.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWebhooksSubscription(companyId: number, subscriptionId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteWebhooksSubscription(companyId, subscriptionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a webhooks subscription.
         * @summary Get Webhooks Subscription
         * @param {number} companyId The ID of the company.
         * @param {string} subscriptionId The ID of the subscription.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhooksSubscription(companyId: number, subscriptionId: string, options?: any): AxiosPromise<GetWebhooksSubscriptionResponse> {
            return localVarFp.getWebhooksSubscription(companyId, subscriptionId, options).then((request) => request(axios, basePath));
        },
        /**
         * List active webhooks subscriptions.
         * @summary List Webhooks Subscriptions
         * @param {number} companyId The ID of the company.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWebhooksSubscriptions(companyId: number, options?: any): AxiosPromise<ListWebhooksSubscriptionsResponse> {
            return localVarFp.listWebhooksSubscriptions(companyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Edit a webhooks subscription.
         * @summary Modify Webhooks Subscription
         * @param {number} companyId The ID of the company.
         * @param {string} subscriptionId The ID of the subscription.
         * @param {ModifyWebhooksSubscriptionRequest} [modifyWebhooksSubscriptionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyWebhooksSubscription(companyId: number, subscriptionId: string, modifyWebhooksSubscriptionRequest?: ModifyWebhooksSubscriptionRequest, options?: any): AxiosPromise<ModifyWebhooksSubscriptionResponse> {
            return localVarFp.modifyWebhooksSubscription(companyId, subscriptionId, modifyWebhooksSubscriptionRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WebhooksApi - interface
 * @export
 * @interface WebhooksApi
 */
export interface WebhooksApiInterface {
    /**
     * Register some webhooks Subscriptions.
     * @summary Create a Webhook Subscription
     * @param {number} companyId The ID of the company.
     * @param {CreateWebhooksSubscriptionRequest} [createWebhooksSubscriptionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApiInterface
     */
    createWebhooksSubscription(companyId: number, createWebhooksSubscriptionRequest?: CreateWebhooksSubscriptionRequest, options?: AxiosRequestConfig): AxiosPromise<CreateWebhooksSubscriptionResponse>;

    /**
     * Delete a webhooks subscription.
     * @summary Delete Webhooks Subscription
     * @param {number} companyId The ID of the company.
     * @param {string} subscriptionId The ID of the subscription.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApiInterface
     */
    deleteWebhooksSubscription(companyId: number, subscriptionId: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Get a webhooks subscription.
     * @summary Get Webhooks Subscription
     * @param {number} companyId The ID of the company.
     * @param {string} subscriptionId The ID of the subscription.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApiInterface
     */
    getWebhooksSubscription(companyId: number, subscriptionId: string, options?: AxiosRequestConfig): AxiosPromise<GetWebhooksSubscriptionResponse>;

    /**
     * List active webhooks subscriptions.
     * @summary List Webhooks Subscriptions
     * @param {number} companyId The ID of the company.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApiInterface
     */
    listWebhooksSubscriptions(companyId: number, options?: AxiosRequestConfig): AxiosPromise<ListWebhooksSubscriptionsResponse>;

    /**
     * Edit a webhooks subscription.
     * @summary Modify Webhooks Subscription
     * @param {number} companyId The ID of the company.
     * @param {string} subscriptionId The ID of the subscription.
     * @param {ModifyWebhooksSubscriptionRequest} [modifyWebhooksSubscriptionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApiInterface
     */
    modifyWebhooksSubscription(companyId: number, subscriptionId: string, modifyWebhooksSubscriptionRequest?: ModifyWebhooksSubscriptionRequest, options?: AxiosRequestConfig): AxiosPromise<ModifyWebhooksSubscriptionResponse>;

}

/**
 * WebhooksApi - object-oriented interface
 * @export
 * @class WebhooksApi
 * @extends {BaseAPI}
 */
export class WebhooksApi extends BaseAPI implements WebhooksApiInterface {
    /**
     * Register some webhooks Subscriptions.
     * @summary Create a Webhook Subscription
     * @param {number} companyId The ID of the company.
     * @param {CreateWebhooksSubscriptionRequest} [createWebhooksSubscriptionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public createWebhooksSubscription(companyId: number, createWebhooksSubscriptionRequest?: CreateWebhooksSubscriptionRequest, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).createWebhooksSubscription(companyId, createWebhooksSubscriptionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a webhooks subscription.
     * @summary Delete Webhooks Subscription
     * @param {number} companyId The ID of the company.
     * @param {string} subscriptionId The ID of the subscription.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public deleteWebhooksSubscription(companyId: number, subscriptionId: string, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).deleteWebhooksSubscription(companyId, subscriptionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a webhooks subscription.
     * @summary Get Webhooks Subscription
     * @param {number} companyId The ID of the company.
     * @param {string} subscriptionId The ID of the subscription.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public getWebhooksSubscription(companyId: number, subscriptionId: string, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).getWebhooksSubscription(companyId, subscriptionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List active webhooks subscriptions.
     * @summary List Webhooks Subscriptions
     * @param {number} companyId The ID of the company.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public listWebhooksSubscriptions(companyId: number, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).listWebhooksSubscriptions(companyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edit a webhooks subscription.
     * @summary Modify Webhooks Subscription
     * @param {number} companyId The ID of the company.
     * @param {string} subscriptionId The ID of the subscription.
     * @param {ModifyWebhooksSubscriptionRequest} [modifyWebhooksSubscriptionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public modifyWebhooksSubscription(companyId: number, subscriptionId: string, modifyWebhooksSubscriptionRequest?: ModifyWebhooksSubscriptionRequest, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).modifyWebhooksSubscription(companyId, subscriptionId, modifyWebhooksSubscriptionRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
