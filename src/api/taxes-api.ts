/* tslint:disable */
/* eslint-disable */
/**
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
import FormData from 'form-data'
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../../base';
// @ts-ignore
import type { CreateF24Request } from '../../src/models';
// @ts-ignore
import type { CreateF24Response } from '../../src/models';
// @ts-ignore
import type { GetF24Response } from '../../src/models';
// @ts-ignore
import type { ListF24Response } from '../../src/models';
// @ts-ignore
import type { ModifyF24Request } from '../../src/models';
// @ts-ignore
import type { ModifyF24Response } from '../../src/models';
// @ts-ignore
import type { UploadF24AttachmentResponse } from '../../src/models';
/**
 * TaxesApi - axios parameter creator
 * @export
 */
export const TaxesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new F24.
         * @summary Create F24
         * @param {number} companyId The ID of the company.
         * @param {CreateF24Request} [createF24Request] The F24 to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createF24: async (companyId: number, createF24Request?: CreateF24Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('createF24', 'companyId', companyId)
            const localVarPath = `/c/{company_id}/taxes`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", ["taxes:a"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['User-Agent'] = 'FattureInCloud/2.1.0/TypeScript-SDK';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createF24Request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes the specified F24.
         * @summary Delete F24
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteF24: async (companyId: number, documentId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteF24', 'companyId', companyId)
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('deleteF24', 'documentId', documentId)
            const localVarPath = `/c/{company_id}/taxes/{document_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"document_id"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", ["taxes:a"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes the attachment of the specified F24.
         * @summary Delete F24 Attachment
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteF24Attachment: async (companyId: number, documentId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteF24Attachment', 'companyId', companyId)
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('deleteF24Attachment', 'documentId', documentId)
            const localVarPath = `/c/{company_id}/taxes/{document_id}/attachment`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"document_id"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", ["taxes:a"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the specified F24.
         * @summary Get F24
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {string} [fields] List of comma-separated fields.
         * @param {GetF24FieldsetEnum} [fieldset] Name of the fieldset.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getF24: async (companyId: number, documentId: number, fields?: string, fieldset?: GetF24FieldsetEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getF24', 'companyId', companyId)
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('getF24', 'documentId', documentId)
            const localVarPath = `/c/{company_id}/taxes/{document_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"document_id"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", ["taxes:r"], configuration)

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (fieldset !== undefined) {
                localVarQueryParameter['fieldset'] = fieldset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the F24s.
         * @summary List F24
         * @param {number} companyId The ID of the company.
         * @param {string} [fields] List of comma-separated fields.
         * @param {ListF24FieldsetEnum} [fieldset] Name of the fieldset.
         * @param {string} [sort] List of comma-separated fields for result sorting (minus for desc sorting).
         * @param {number} [page] The page to retrieve.
         * @param {number} [perPage] The size of the page.
         * @param {string} [q] Query for filtering the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listF24: async (companyId: number, fields?: string, fieldset?: ListF24FieldsetEnum, sort?: string, page?: number, perPage?: number, q?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listF24', 'companyId', companyId)
            const localVarPath = `/c/{company_id}/taxes`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", ["taxes:r"], configuration)

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (fieldset !== undefined) {
                localVarQueryParameter['fieldset'] = fieldset;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modifies the specified F24.
         * @summary Modify F24
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {ModifyF24Request} [modifyF24Request] The F24
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyF24: async (companyId: number, documentId: number, modifyF24Request?: ModifyF24Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('modifyF24', 'companyId', companyId)
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('modifyF24', 'documentId', documentId)
            const localVarPath = `/c/{company_id}/taxes/{document_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"document_id"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", ["taxes:a"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['User-Agent'] = 'FattureInCloud/2.1.0/TypeScript-SDK';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyF24Request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Uploads an attachment destined to a F24. The actual association between the document and the attachment must be implemented separately, using the returned token.
         * @summary Upload F24 Attachment
         * @param {number} companyId The ID of the company.
         * @param {string | null} [filename] Attachment file name
         * @param {File} [attachment] Attachment file [.png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadF24Attachment: async (companyId: number, filename?: string | null, attachment?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('uploadF24Attachment', 'companyId', companyId)
            const localVarPath = `/c/{company_id}/taxes/attachment`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", ["taxes:a"], configuration)


            if (filename !== undefined) { 
                localVarFormParams.append('filename', filename as any);
            }
    
            if (attachment !== undefined) { 
                localVarFormParams.append('attachment', attachment as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TaxesApi - functional programming interface
 * @export
 */
export const TaxesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TaxesApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new F24.
         * @summary Create F24
         * @param {number} companyId The ID of the company.
         * @param {CreateF24Request} [createF24Request] The F24 to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createF24(companyId: number, createF24Request?: CreateF24Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateF24Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createF24(companyId, createF24Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaxesApi.createF24']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Removes the specified F24.
         * @summary Delete F24
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteF24(companyId: number, documentId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteF24(companyId, documentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaxesApi.deleteF24']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Removes the attachment of the specified F24.
         * @summary Delete F24 Attachment
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteF24Attachment(companyId: number, documentId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteF24Attachment(companyId, documentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaxesApi.deleteF24Attachment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Gets the specified F24.
         * @summary Get F24
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {string} [fields] List of comma-separated fields.
         * @param {GetF24FieldsetEnum} [fieldset] Name of the fieldset.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getF24(companyId: number, documentId: number, fields?: string, fieldset?: GetF24FieldsetEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetF24Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getF24(companyId, documentId, fields, fieldset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaxesApi.getF24']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Lists the F24s.
         * @summary List F24
         * @param {number} companyId The ID of the company.
         * @param {string} [fields] List of comma-separated fields.
         * @param {ListF24FieldsetEnum} [fieldset] Name of the fieldset.
         * @param {string} [sort] List of comma-separated fields for result sorting (minus for desc sorting).
         * @param {number} [page] The page to retrieve.
         * @param {number} [perPage] The size of the page.
         * @param {string} [q] Query for filtering the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listF24(companyId: number, fields?: string, fieldset?: ListF24FieldsetEnum, sort?: string, page?: number, perPage?: number, q?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListF24Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listF24(companyId, fields, fieldset, sort, page, perPage, q, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaxesApi.listF24']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Modifies the specified F24.
         * @summary Modify F24
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {ModifyF24Request} [modifyF24Request] The F24
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyF24(companyId: number, documentId: number, modifyF24Request?: ModifyF24Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyF24Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyF24(companyId, documentId, modifyF24Request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaxesApi.modifyF24']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Uploads an attachment destined to a F24. The actual association between the document and the attachment must be implemented separately, using the returned token.
         * @summary Upload F24 Attachment
         * @param {number} companyId The ID of the company.
         * @param {string | null} [filename] Attachment file name
         * @param {File} [attachment] Attachment file [.png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadF24Attachment(companyId: number, filename?: string | null, attachment?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadF24AttachmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadF24Attachment(companyId, filename, attachment, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaxesApi.uploadF24Attachment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TaxesApi - factory interface
 * @export
 */
export const TaxesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TaxesApiFp(configuration)
    return {
        /**
         * Creates a new F24.
         * @summary Create F24
         * @param {number} companyId The ID of the company.
         * @param {CreateF24Request} [createF24Request] The F24 to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createF24(companyId: number, createF24Request?: CreateF24Request, options?: any): AxiosPromise<CreateF24Response> {
            return localVarFp.createF24(companyId, createF24Request, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes the specified F24.
         * @summary Delete F24
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteF24(companyId: number, documentId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteF24(companyId, documentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes the attachment of the specified F24.
         * @summary Delete F24 Attachment
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteF24Attachment(companyId: number, documentId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteF24Attachment(companyId, documentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the specified F24.
         * @summary Get F24
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {string} [fields] List of comma-separated fields.
         * @param {GetF24FieldsetEnum} [fieldset] Name of the fieldset.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getF24(companyId: number, documentId: number, fields?: string, fieldset?: GetF24FieldsetEnum, options?: any): AxiosPromise<GetF24Response> {
            return localVarFp.getF24(companyId, documentId, fields, fieldset, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists the F24s.
         * @summary List F24
         * @param {number} companyId The ID of the company.
         * @param {string} [fields] List of comma-separated fields.
         * @param {ListF24FieldsetEnum} [fieldset] Name of the fieldset.
         * @param {string} [sort] List of comma-separated fields for result sorting (minus for desc sorting).
         * @param {number} [page] The page to retrieve.
         * @param {number} [perPage] The size of the page.
         * @param {string} [q] Query for filtering the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listF24(companyId: number, fields?: string, fieldset?: ListF24FieldsetEnum, sort?: string, page?: number, perPage?: number, q?: string, options?: any): AxiosPromise<ListF24Response> {
            return localVarFp.listF24(companyId, fields, fieldset, sort, page, perPage, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Modifies the specified F24.
         * @summary Modify F24
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {ModifyF24Request} [modifyF24Request] The F24
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyF24(companyId: number, documentId: number, modifyF24Request?: ModifyF24Request, options?: any): AxiosPromise<ModifyF24Response> {
            return localVarFp.modifyF24(companyId, documentId, modifyF24Request, options).then((request) => request(axios, basePath));
        },
        /**
         * Uploads an attachment destined to a F24. The actual association between the document and the attachment must be implemented separately, using the returned token.
         * @summary Upload F24 Attachment
         * @param {number} companyId The ID of the company.
         * @param {string | null} [filename] Attachment file name
         * @param {File} [attachment] Attachment file [.png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadF24Attachment(companyId: number, filename?: string | null, attachment?: File, options?: any): AxiosPromise<UploadF24AttachmentResponse> {
            return localVarFp.uploadF24Attachment(companyId, filename, attachment, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TaxesApi - interface
 * @export
 * @interface TaxesApi
 */
export interface TaxesApiInterface {
    /**
     * Creates a new F24.
     * @summary Create F24
     * @param {number} companyId The ID of the company.
     * @param {CreateF24Request} [createF24Request] The F24 to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxesApiInterface
     */
    createF24(companyId: number, createF24Request?: CreateF24Request, options?: RawAxiosRequestConfig): AxiosPromise<CreateF24Response>;

    /**
     * Removes the specified F24.
     * @summary Delete F24
     * @param {number} companyId The ID of the company.
     * @param {number} documentId The ID of the document.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxesApiInterface
     */
    deleteF24(companyId: number, documentId: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Removes the attachment of the specified F24.
     * @summary Delete F24 Attachment
     * @param {number} companyId The ID of the company.
     * @param {number} documentId The ID of the document.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxesApiInterface
     */
    deleteF24Attachment(companyId: number, documentId: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Gets the specified F24.
     * @summary Get F24
     * @param {number} companyId The ID of the company.
     * @param {number} documentId The ID of the document.
     * @param {string} [fields] List of comma-separated fields.
     * @param {GetF24FieldsetEnum} [fieldset] Name of the fieldset.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxesApiInterface
     */
    getF24(companyId: number, documentId: number, fields?: string, fieldset?: GetF24FieldsetEnum, options?: RawAxiosRequestConfig): AxiosPromise<GetF24Response>;

    /**
     * Lists the F24s.
     * @summary List F24
     * @param {number} companyId The ID of the company.
     * @param {string} [fields] List of comma-separated fields.
     * @param {ListF24FieldsetEnum} [fieldset] Name of the fieldset.
     * @param {string} [sort] List of comma-separated fields for result sorting (minus for desc sorting).
     * @param {number} [page] The page to retrieve.
     * @param {number} [perPage] The size of the page.
     * @param {string} [q] Query for filtering the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxesApiInterface
     */
    listF24(companyId: number, fields?: string, fieldset?: ListF24FieldsetEnum, sort?: string, page?: number, perPage?: number, q?: string, options?: RawAxiosRequestConfig): AxiosPromise<ListF24Response>;

    /**
     * Modifies the specified F24.
     * @summary Modify F24
     * @param {number} companyId The ID of the company.
     * @param {number} documentId The ID of the document.
     * @param {ModifyF24Request} [modifyF24Request] The F24
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxesApiInterface
     */
    modifyF24(companyId: number, documentId: number, modifyF24Request?: ModifyF24Request, options?: RawAxiosRequestConfig): AxiosPromise<ModifyF24Response>;

    /**
     * Uploads an attachment destined to a F24. The actual association between the document and the attachment must be implemented separately, using the returned token.
     * @summary Upload F24 Attachment
     * @param {number} companyId The ID of the company.
     * @param {string | null} [filename] Attachment file name
     * @param {File} [attachment] Attachment file [.png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxesApiInterface
     */
    uploadF24Attachment(companyId: number, filename?: string | null, attachment?: File, options?: RawAxiosRequestConfig): AxiosPromise<UploadF24AttachmentResponse>;

}

/**
 * TaxesApi - object-oriented interface
 * @export
 * @class TaxesApi
 * @extends {BaseAPI}
 */
export class TaxesApi extends BaseAPI implements TaxesApiInterface {
    /**
     * Creates a new F24.
     * @summary Create F24
     * @param {number} companyId The ID of the company.
     * @param {CreateF24Request} [createF24Request] The F24 to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxesApi
     */
    public createF24(companyId: number, createF24Request?: CreateF24Request, options?: RawAxiosRequestConfig) {
        return TaxesApiFp(this.configuration).createF24(companyId, createF24Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes the specified F24.
     * @summary Delete F24
     * @param {number} companyId The ID of the company.
     * @param {number} documentId The ID of the document.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxesApi
     */
    public deleteF24(companyId: number, documentId: number, options?: RawAxiosRequestConfig) {
        return TaxesApiFp(this.configuration).deleteF24(companyId, documentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes the attachment of the specified F24.
     * @summary Delete F24 Attachment
     * @param {number} companyId The ID of the company.
     * @param {number} documentId The ID of the document.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxesApi
     */
    public deleteF24Attachment(companyId: number, documentId: number, options?: RawAxiosRequestConfig) {
        return TaxesApiFp(this.configuration).deleteF24Attachment(companyId, documentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the specified F24.
     * @summary Get F24
     * @param {number} companyId The ID of the company.
     * @param {number} documentId The ID of the document.
     * @param {string} [fields] List of comma-separated fields.
     * @param {GetF24FieldsetEnum} [fieldset] Name of the fieldset.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxesApi
     */
    public getF24(companyId: number, documentId: number, fields?: string, fieldset?: GetF24FieldsetEnum, options?: RawAxiosRequestConfig) {
        return TaxesApiFp(this.configuration).getF24(companyId, documentId, fields, fieldset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists the F24s.
     * @summary List F24
     * @param {number} companyId The ID of the company.
     * @param {string} [fields] List of comma-separated fields.
     * @param {ListF24FieldsetEnum} [fieldset] Name of the fieldset.
     * @param {string} [sort] List of comma-separated fields for result sorting (minus for desc sorting).
     * @param {number} [page] The page to retrieve.
     * @param {number} [perPage] The size of the page.
     * @param {string} [q] Query for filtering the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxesApi
     */
    public listF24(companyId: number, fields?: string, fieldset?: ListF24FieldsetEnum, sort?: string, page?: number, perPage?: number, q?: string, options?: RawAxiosRequestConfig) {
        return TaxesApiFp(this.configuration).listF24(companyId, fields, fieldset, sort, page, perPage, q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modifies the specified F24.
     * @summary Modify F24
     * @param {number} companyId The ID of the company.
     * @param {number} documentId The ID of the document.
     * @param {ModifyF24Request} [modifyF24Request] The F24
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxesApi
     */
    public modifyF24(companyId: number, documentId: number, modifyF24Request?: ModifyF24Request, options?: RawAxiosRequestConfig) {
        return TaxesApiFp(this.configuration).modifyF24(companyId, documentId, modifyF24Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Uploads an attachment destined to a F24. The actual association between the document and the attachment must be implemented separately, using the returned token.
     * @summary Upload F24 Attachment
     * @param {number} companyId The ID of the company.
     * @param {string | null} [filename] Attachment file name
     * @param {File} [attachment] Attachment file [.png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxesApi
     */
    public uploadF24Attachment(companyId: number, filename?: string | null, attachment?: File, options?: RawAxiosRequestConfig) {
        return TaxesApiFp(this.configuration).uploadF24Attachment(companyId, filename, attachment, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetF24FieldsetEnum = {
    Basic: 'basic',
    Detailed: 'detailed'
} as const;
export type GetF24FieldsetEnum = typeof GetF24FieldsetEnum[keyof typeof GetF24FieldsetEnum];
/**
 * @export
 */
export const ListF24FieldsetEnum = {
    Basic: 'basic',
    Detailed: 'detailed'
} as const;
export type ListF24FieldsetEnum = typeof ListF24FieldsetEnum[keyof typeof ListF24FieldsetEnum];
