/* tslint:disable */
/* eslint-disable */
/**
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.23
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../../configuration';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
import FormData from 'form-data'
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../base';
// @ts-ignore
import { CreateReceivedDocumentRequest } from '../../src/models';
// @ts-ignore
import { CreateReceivedDocumentResponse } from '../../src/models';
// @ts-ignore
import { GetExistingReceivedDocumentTotalsRequest } from '../../src/models';
// @ts-ignore
import { GetExistingReceivedDocumentTotalsResponse } from '../../src/models';
// @ts-ignore
import { GetNewReceivedDocumentTotalsRequest } from '../../src/models';
// @ts-ignore
import { GetNewReceivedDocumentTotalsResponse } from '../../src/models';
// @ts-ignore
import { GetReceivedDocumentPreCreateInfoResponse } from '../../src/models';
// @ts-ignore
import { GetReceivedDocumentResponse } from '../../src/models';
// @ts-ignore
import { ListReceivedDocumentsResponse } from '../../src/models';
// @ts-ignore
import { ModifyReceivedDocumentRequest } from '../../src/models';
// @ts-ignore
import { ModifyReceivedDocumentResponse } from '../../src/models';
// @ts-ignore
import { UploadReceivedDocumentAttachmentResponse } from '../../src/models';
/**
 * ReceivedDocumentsApi - axios parameter creator
 * @export
 */
export const ReceivedDocumentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new document.
         * @summary Create Received Document
         * @param {number} companyId The ID of the company.
         * @param {CreateReceivedDocumentRequest} [createReceivedDocumentRequest] Document to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReceivedDocument: async (companyId: number, createReceivedDocumentRequest?: CreateReceivedDocumentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('createReceivedDocument', 'companyId', companyId)
            const localVarPath = `/c/{company_id}/received_documents`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", ["received_documents:a", "stock:a"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['User-Agent'] = 'FattureInCloud/2.0.7/TypeScript-SDK';


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createReceivedDocumentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the specified document.
         * @summary Delete Received Document
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReceivedDocument: async (companyId: number, documentId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteReceivedDocument', 'companyId', companyId)
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('deleteReceivedDocument', 'documentId', documentId)
            const localVarPath = `/c/{company_id}/received_documents/{document_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"document_id"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", ["received_documents:a", "stock:a"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes the attachment of the specified document.
         * @summary Delete Received Document Attachment
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReceivedDocumentAttachment: async (companyId: number, documentId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteReceivedDocumentAttachment', 'companyId', companyId)
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('deleteReceivedDocumentAttachment', 'documentId', documentId)
            const localVarPath = `/c/{company_id}/received_documents/{document_id}/attachment`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"document_id"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", ["received_documents:a", "stock:a"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the totals for the specified document.
         * @summary Get Existing Received Document Totals
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {GetExistingReceivedDocumentTotalsRequest} [getExistingReceivedDocumentTotalsRequest] Received document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExistingReceivedDocumentTotals: async (companyId: number, documentId: number, getExistingReceivedDocumentTotalsRequest?: GetExistingReceivedDocumentTotalsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getExistingReceivedDocumentTotals', 'companyId', companyId)
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('getExistingReceivedDocumentTotals', 'documentId', documentId)
            const localVarPath = `/c/{company_id}/received_documents/{document_id}/totals`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"document_id"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", ["received_documents:a", "stock:a"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['User-Agent'] = 'FattureInCloud/2.0.7/TypeScript-SDK';


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getExistingReceivedDocumentTotalsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the totals for a new document.
         * @summary Get New Received Document Totals
         * @param {number} companyId The ID of the company.
         * @param {GetNewReceivedDocumentTotalsRequest} [getNewReceivedDocumentTotalsRequest] Received document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNewReceivedDocumentTotals: async (companyId: number, getNewReceivedDocumentTotalsRequest?: GetNewReceivedDocumentTotalsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getNewReceivedDocumentTotals', 'companyId', companyId)
            const localVarPath = `/c/{company_id}/received_documents/totals`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", ["received_documents:a", "stock:a"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['User-Agent'] = 'FattureInCloud/2.0.7/TypeScript-SDK';


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getNewReceivedDocumentTotalsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the specified document.
         * @summary Get Received Document
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {string} [fields] List of comma-separated fields.
         * @param {'basic' | 'detailed'} [fieldset] Name of the fieldset.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReceivedDocument: async (companyId: number, documentId: number, fields?: string, fieldset?: 'basic' | 'detailed', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getReceivedDocument', 'companyId', companyId)
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('getReceivedDocument', 'documentId', documentId)
            const localVarPath = `/c/{company_id}/received_documents/{document_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"document_id"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", ["received_documents:r", "stock:r"], configuration)

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (fieldset !== undefined) {
                localVarQueryParameter['fieldset'] = fieldset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the information useful while creating a new document.
         * @summary Get Received Document Pre-Create Info
         * @param {number} companyId The ID of the company.
         * @param {'expense' | 'passive_credit_note' | 'passive_delivery_note'} type The type of the received document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReceivedDocumentPreCreateInfo: async (companyId: number, type: 'expense' | 'passive_credit_note' | 'passive_delivery_note', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getReceivedDocumentPreCreateInfo', 'companyId', companyId)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('getReceivedDocumentPreCreateInfo', 'type', type)
            const localVarPath = `/c/{company_id}/received_documents/info`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", ["received_documents:r"], configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the received documents.
         * @summary List Received Documents
         * @param {number} companyId The ID of the company.
         * @param {'expense' | 'passive_credit_note' | 'passive_delivery_note'} type The type of the received document.
         * @param {string} [fields] List of comma-separated fields.
         * @param {'basic' | 'detailed'} [fieldset] Name of the fieldset.
         * @param {string} [sort] List of comma-separated fields for result sorting (minus for desc sorting).
         * @param {number} [page] The page to retrieve.
         * @param {number} [perPage] The size of the page.
         * @param {string} [q] Query for filtering the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listReceivedDocuments: async (companyId: number, type: 'expense' | 'passive_credit_note' | 'passive_delivery_note', fields?: string, fieldset?: 'basic' | 'detailed', sort?: string, page?: number, perPage?: number, q?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listReceivedDocuments', 'companyId', companyId)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('listReceivedDocuments', 'type', type)
            const localVarPath = `/c/{company_id}/received_documents`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", ["received_documents:r", "stock:r"], configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (fieldset !== undefined) {
                localVarQueryParameter['fieldset'] = fieldset;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modifies the specified document.
         * @summary Modify Received Document
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {ModifyReceivedDocumentRequest} [modifyReceivedDocumentRequest] Modified document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyReceivedDocument: async (companyId: number, documentId: number, modifyReceivedDocumentRequest?: ModifyReceivedDocumentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('modifyReceivedDocument', 'companyId', companyId)
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('modifyReceivedDocument', 'documentId', documentId)
            const localVarPath = `/c/{company_id}/received_documents/{document_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"document_id"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", ["received_documents:a", "stock:a"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['User-Agent'] = 'FattureInCloud/2.0.7/TypeScript-SDK';


            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyReceivedDocumentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Uploads an attachment destined to a received document. The actual association between the document and the attachment must be implemented separately, using the returned token.
         * @summary Upload Received Document Attachment
         * @param {number} companyId The ID of the company.
         * @param {string} [filename] Name of the file.
         * @param {any} [attachment] Valid format: .png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadReceivedDocumentAttachment: async (companyId: number, filename?: string, attachment?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('uploadReceivedDocumentAttachment', 'companyId', companyId)
            const localVarPath = `/c/{company_id}/received_documents/attachment`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", ["received_documents:a", "stock:a"], configuration)


            if (filename !== undefined) { 
                localVarFormParams.append('filename', filename as any);
            }
    
            if (attachment !== undefined) { 
                localVarFormParams.append('attachment', attachment as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...(localVarFormParams as any).getHeaders?.(), ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReceivedDocumentsApi - functional programming interface
 * @export
 */
export const ReceivedDocumentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReceivedDocumentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new document.
         * @summary Create Received Document
         * @param {number} companyId The ID of the company.
         * @param {CreateReceivedDocumentRequest} [createReceivedDocumentRequest] Document to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createReceivedDocument(companyId: number, createReceivedDocumentRequest?: CreateReceivedDocumentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateReceivedDocumentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createReceivedDocument(companyId, createReceivedDocumentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes the specified document.
         * @summary Delete Received Document
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteReceivedDocument(companyId: number, documentId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteReceivedDocument(companyId, documentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes the attachment of the specified document.
         * @summary Delete Received Document Attachment
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteReceivedDocumentAttachment(companyId: number, documentId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteReceivedDocumentAttachment(companyId, documentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the totals for the specified document.
         * @summary Get Existing Received Document Totals
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {GetExistingReceivedDocumentTotalsRequest} [getExistingReceivedDocumentTotalsRequest] Received document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExistingReceivedDocumentTotals(companyId: number, documentId: number, getExistingReceivedDocumentTotalsRequest?: GetExistingReceivedDocumentTotalsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetExistingReceivedDocumentTotalsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExistingReceivedDocumentTotals(companyId, documentId, getExistingReceivedDocumentTotalsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the totals for a new document.
         * @summary Get New Received Document Totals
         * @param {number} companyId The ID of the company.
         * @param {GetNewReceivedDocumentTotalsRequest} [getNewReceivedDocumentTotalsRequest] Received document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNewReceivedDocumentTotals(companyId: number, getNewReceivedDocumentTotalsRequest?: GetNewReceivedDocumentTotalsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetNewReceivedDocumentTotalsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNewReceivedDocumentTotals(companyId, getNewReceivedDocumentTotalsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets the specified document.
         * @summary Get Received Document
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {string} [fields] List of comma-separated fields.
         * @param {'basic' | 'detailed'} [fieldset] Name of the fieldset.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReceivedDocument(companyId: number, documentId: number, fields?: string, fieldset?: 'basic' | 'detailed', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetReceivedDocumentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReceivedDocument(companyId, documentId, fields, fieldset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the information useful while creating a new document.
         * @summary Get Received Document Pre-Create Info
         * @param {number} companyId The ID of the company.
         * @param {'expense' | 'passive_credit_note' | 'passive_delivery_note'} type The type of the received document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReceivedDocumentPreCreateInfo(companyId: number, type: 'expense' | 'passive_credit_note' | 'passive_delivery_note', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetReceivedDocumentPreCreateInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReceivedDocumentPreCreateInfo(companyId, type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists the received documents.
         * @summary List Received Documents
         * @param {number} companyId The ID of the company.
         * @param {'expense' | 'passive_credit_note' | 'passive_delivery_note'} type The type of the received document.
         * @param {string} [fields] List of comma-separated fields.
         * @param {'basic' | 'detailed'} [fieldset] Name of the fieldset.
         * @param {string} [sort] List of comma-separated fields for result sorting (minus for desc sorting).
         * @param {number} [page] The page to retrieve.
         * @param {number} [perPage] The size of the page.
         * @param {string} [q] Query for filtering the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listReceivedDocuments(companyId: number, type: 'expense' | 'passive_credit_note' | 'passive_delivery_note', fields?: string, fieldset?: 'basic' | 'detailed', sort?: string, page?: number, perPage?: number, q?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListReceivedDocumentsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listReceivedDocuments(companyId, type, fields, fieldset, sort, page, perPage, q, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Modifies the specified document.
         * @summary Modify Received Document
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {ModifyReceivedDocumentRequest} [modifyReceivedDocumentRequest] Modified document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyReceivedDocument(companyId: number, documentId: number, modifyReceivedDocumentRequest?: ModifyReceivedDocumentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyReceivedDocumentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyReceivedDocument(companyId, documentId, modifyReceivedDocumentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Uploads an attachment destined to a received document. The actual association between the document and the attachment must be implemented separately, using the returned token.
         * @summary Upload Received Document Attachment
         * @param {number} companyId The ID of the company.
         * @param {string} [filename] Name of the file.
         * @param {any} [attachment] Valid format: .png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadReceivedDocumentAttachment(companyId: number, filename?: string, attachment?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadReceivedDocumentAttachmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadReceivedDocumentAttachment(companyId, filename, attachment, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReceivedDocumentsApi - factory interface
 * @export
 */
export const ReceivedDocumentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReceivedDocumentsApiFp(configuration)
    return {
        /**
         * Creates a new document.
         * @summary Create Received Document
         * @param {number} companyId The ID of the company.
         * @param {CreateReceivedDocumentRequest} [createReceivedDocumentRequest] Document to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReceivedDocument(companyId: number, createReceivedDocumentRequest?: CreateReceivedDocumentRequest, options?: any): AxiosPromise<CreateReceivedDocumentResponse> {
            return localVarFp.createReceivedDocument(companyId, createReceivedDocumentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes the specified document.
         * @summary Delete Received Document
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReceivedDocument(companyId: number, documentId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteReceivedDocument(companyId, documentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes the attachment of the specified document.
         * @summary Delete Received Document Attachment
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReceivedDocumentAttachment(companyId: number, documentId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteReceivedDocumentAttachment(companyId, documentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the totals for the specified document.
         * @summary Get Existing Received Document Totals
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {GetExistingReceivedDocumentTotalsRequest} [getExistingReceivedDocumentTotalsRequest] Received document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExistingReceivedDocumentTotals(companyId: number, documentId: number, getExistingReceivedDocumentTotalsRequest?: GetExistingReceivedDocumentTotalsRequest, options?: any): AxiosPromise<GetExistingReceivedDocumentTotalsResponse> {
            return localVarFp.getExistingReceivedDocumentTotals(companyId, documentId, getExistingReceivedDocumentTotalsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the totals for a new document.
         * @summary Get New Received Document Totals
         * @param {number} companyId The ID of the company.
         * @param {GetNewReceivedDocumentTotalsRequest} [getNewReceivedDocumentTotalsRequest] Received document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNewReceivedDocumentTotals(companyId: number, getNewReceivedDocumentTotalsRequest?: GetNewReceivedDocumentTotalsRequest, options?: any): AxiosPromise<GetNewReceivedDocumentTotalsResponse> {
            return localVarFp.getNewReceivedDocumentTotals(companyId, getNewReceivedDocumentTotalsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the specified document.
         * @summary Get Received Document
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {string} [fields] List of comma-separated fields.
         * @param {'basic' | 'detailed'} [fieldset] Name of the fieldset.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReceivedDocument(companyId: number, documentId: number, fields?: string, fieldset?: 'basic' | 'detailed', options?: any): AxiosPromise<GetReceivedDocumentResponse> {
            return localVarFp.getReceivedDocument(companyId, documentId, fields, fieldset, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the information useful while creating a new document.
         * @summary Get Received Document Pre-Create Info
         * @param {number} companyId The ID of the company.
         * @param {'expense' | 'passive_credit_note' | 'passive_delivery_note'} type The type of the received document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReceivedDocumentPreCreateInfo(companyId: number, type: 'expense' | 'passive_credit_note' | 'passive_delivery_note', options?: any): AxiosPromise<GetReceivedDocumentPreCreateInfoResponse> {
            return localVarFp.getReceivedDocumentPreCreateInfo(companyId, type, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists the received documents.
         * @summary List Received Documents
         * @param {number} companyId The ID of the company.
         * @param {'expense' | 'passive_credit_note' | 'passive_delivery_note'} type The type of the received document.
         * @param {string} [fields] List of comma-separated fields.
         * @param {'basic' | 'detailed'} [fieldset] Name of the fieldset.
         * @param {string} [sort] List of comma-separated fields for result sorting (minus for desc sorting).
         * @param {number} [page] The page to retrieve.
         * @param {number} [perPage] The size of the page.
         * @param {string} [q] Query for filtering the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listReceivedDocuments(companyId: number, type: 'expense' | 'passive_credit_note' | 'passive_delivery_note', fields?: string, fieldset?: 'basic' | 'detailed', sort?: string, page?: number, perPage?: number, q?: string, options?: any): AxiosPromise<ListReceivedDocumentsResponse> {
            return localVarFp.listReceivedDocuments(companyId, type, fields, fieldset, sort, page, perPage, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Modifies the specified document.
         * @summary Modify Received Document
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {ModifyReceivedDocumentRequest} [modifyReceivedDocumentRequest] Modified document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyReceivedDocument(companyId: number, documentId: number, modifyReceivedDocumentRequest?: ModifyReceivedDocumentRequest, options?: any): AxiosPromise<ModifyReceivedDocumentResponse> {
            return localVarFp.modifyReceivedDocument(companyId, documentId, modifyReceivedDocumentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Uploads an attachment destined to a received document. The actual association between the document and the attachment must be implemented separately, using the returned token.
         * @summary Upload Received Document Attachment
         * @param {number} companyId The ID of the company.
         * @param {string} [filename] Name of the file.
         * @param {any} [attachment] Valid format: .png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadReceivedDocumentAttachment(companyId: number, filename?: string, attachment?: any, options?: any): AxiosPromise<UploadReceivedDocumentAttachmentResponse> {
            return localVarFp.uploadReceivedDocumentAttachment(companyId, filename, attachment, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReceivedDocumentsApi - interface
 * @export
 * @interface ReceivedDocumentsApi
 */
export interface ReceivedDocumentsApiInterface {
    /**
     * Creates a new document.
     * @summary Create Received Document
     * @param {number} companyId The ID of the company.
     * @param {CreateReceivedDocumentRequest} [createReceivedDocumentRequest] Document to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceivedDocumentsApiInterface
     */
    createReceivedDocument(companyId: number, createReceivedDocumentRequest?: CreateReceivedDocumentRequest, options?: AxiosRequestConfig): AxiosPromise<CreateReceivedDocumentResponse>;

    /**
     * Deletes the specified document.
     * @summary Delete Received Document
     * @param {number} companyId The ID of the company.
     * @param {number} documentId The ID of the document.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceivedDocumentsApiInterface
     */
    deleteReceivedDocument(companyId: number, documentId: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Removes the attachment of the specified document.
     * @summary Delete Received Document Attachment
     * @param {number} companyId The ID of the company.
     * @param {number} documentId The ID of the document.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceivedDocumentsApiInterface
     */
    deleteReceivedDocumentAttachment(companyId: number, documentId: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Returns the totals for the specified document.
     * @summary Get Existing Received Document Totals
     * @param {number} companyId The ID of the company.
     * @param {number} documentId The ID of the document.
     * @param {GetExistingReceivedDocumentTotalsRequest} [getExistingReceivedDocumentTotalsRequest] Received document.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceivedDocumentsApiInterface
     */
    getExistingReceivedDocumentTotals(companyId: number, documentId: number, getExistingReceivedDocumentTotalsRequest?: GetExistingReceivedDocumentTotalsRequest, options?: AxiosRequestConfig): AxiosPromise<GetExistingReceivedDocumentTotalsResponse>;

    /**
     * Returns the totals for a new document.
     * @summary Get New Received Document Totals
     * @param {number} companyId The ID of the company.
     * @param {GetNewReceivedDocumentTotalsRequest} [getNewReceivedDocumentTotalsRequest] Received document.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceivedDocumentsApiInterface
     */
    getNewReceivedDocumentTotals(companyId: number, getNewReceivedDocumentTotalsRequest?: GetNewReceivedDocumentTotalsRequest, options?: AxiosRequestConfig): AxiosPromise<GetNewReceivedDocumentTotalsResponse>;

    /**
     * Gets the specified document.
     * @summary Get Received Document
     * @param {number} companyId The ID of the company.
     * @param {number} documentId The ID of the document.
     * @param {string} [fields] List of comma-separated fields.
     * @param {'basic' | 'detailed'} [fieldset] Name of the fieldset.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceivedDocumentsApiInterface
     */
    getReceivedDocument(companyId: number, documentId: number, fields?: string, fieldset?: 'basic' | 'detailed', options?: AxiosRequestConfig): AxiosPromise<GetReceivedDocumentResponse>;

    /**
     * Retrieves the information useful while creating a new document.
     * @summary Get Received Document Pre-Create Info
     * @param {number} companyId The ID of the company.
     * @param {'expense' | 'passive_credit_note' | 'passive_delivery_note'} type The type of the received document.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceivedDocumentsApiInterface
     */
    getReceivedDocumentPreCreateInfo(companyId: number, type: 'expense' | 'passive_credit_note' | 'passive_delivery_note', options?: AxiosRequestConfig): AxiosPromise<GetReceivedDocumentPreCreateInfoResponse>;

    /**
     * Lists the received documents.
     * @summary List Received Documents
     * @param {number} companyId The ID of the company.
     * @param {'expense' | 'passive_credit_note' | 'passive_delivery_note'} type The type of the received document.
     * @param {string} [fields] List of comma-separated fields.
     * @param {'basic' | 'detailed'} [fieldset] Name of the fieldset.
     * @param {string} [sort] List of comma-separated fields for result sorting (minus for desc sorting).
     * @param {number} [page] The page to retrieve.
     * @param {number} [perPage] The size of the page.
     * @param {string} [q] Query for filtering the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceivedDocumentsApiInterface
     */
    listReceivedDocuments(companyId: number, type: 'expense' | 'passive_credit_note' | 'passive_delivery_note', fields?: string, fieldset?: 'basic' | 'detailed', sort?: string, page?: number, perPage?: number, q?: string, options?: AxiosRequestConfig): AxiosPromise<ListReceivedDocumentsResponse>;

    /**
     * Modifies the specified document.
     * @summary Modify Received Document
     * @param {number} companyId The ID of the company.
     * @param {number} documentId The ID of the document.
     * @param {ModifyReceivedDocumentRequest} [modifyReceivedDocumentRequest] Modified document.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceivedDocumentsApiInterface
     */
    modifyReceivedDocument(companyId: number, documentId: number, modifyReceivedDocumentRequest?: ModifyReceivedDocumentRequest, options?: AxiosRequestConfig): AxiosPromise<ModifyReceivedDocumentResponse>;

    /**
     * Uploads an attachment destined to a received document. The actual association between the document and the attachment must be implemented separately, using the returned token.
     * @summary Upload Received Document Attachment
     * @param {number} companyId The ID of the company.
     * @param {string} [filename] Name of the file.
     * @param {any} [attachment] Valid format: .png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceivedDocumentsApiInterface
     */
    uploadReceivedDocumentAttachment(companyId: number, filename?: string, attachment?: any, options?: AxiosRequestConfig): AxiosPromise<UploadReceivedDocumentAttachmentResponse>;

}

/**
 * ReceivedDocumentsApi - object-oriented interface
 * @export
 * @class ReceivedDocumentsApi
 * @extends {BaseAPI}
 */
export class ReceivedDocumentsApi extends BaseAPI implements ReceivedDocumentsApiInterface {
    /**
     * Creates a new document.
     * @summary Create Received Document
     * @param {number} companyId The ID of the company.
     * @param {CreateReceivedDocumentRequest} [createReceivedDocumentRequest] Document to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceivedDocumentsApi
     */
    public createReceivedDocument(companyId: number, createReceivedDocumentRequest?: CreateReceivedDocumentRequest, options?: AxiosRequestConfig) {
        return ReceivedDocumentsApiFp(this.configuration).createReceivedDocument(companyId, createReceivedDocumentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes the specified document.
     * @summary Delete Received Document
     * @param {number} companyId The ID of the company.
     * @param {number} documentId The ID of the document.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceivedDocumentsApi
     */
    public deleteReceivedDocument(companyId: number, documentId: number, options?: AxiosRequestConfig) {
        return ReceivedDocumentsApiFp(this.configuration).deleteReceivedDocument(companyId, documentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes the attachment of the specified document.
     * @summary Delete Received Document Attachment
     * @param {number} companyId The ID of the company.
     * @param {number} documentId The ID of the document.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceivedDocumentsApi
     */
    public deleteReceivedDocumentAttachment(companyId: number, documentId: number, options?: AxiosRequestConfig) {
        return ReceivedDocumentsApiFp(this.configuration).deleteReceivedDocumentAttachment(companyId, documentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the totals for the specified document.
     * @summary Get Existing Received Document Totals
     * @param {number} companyId The ID of the company.
     * @param {number} documentId The ID of the document.
     * @param {GetExistingReceivedDocumentTotalsRequest} [getExistingReceivedDocumentTotalsRequest] Received document.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceivedDocumentsApi
     */
    public getExistingReceivedDocumentTotals(companyId: number, documentId: number, getExistingReceivedDocumentTotalsRequest?: GetExistingReceivedDocumentTotalsRequest, options?: AxiosRequestConfig) {
        return ReceivedDocumentsApiFp(this.configuration).getExistingReceivedDocumentTotals(companyId, documentId, getExistingReceivedDocumentTotalsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the totals for a new document.
     * @summary Get New Received Document Totals
     * @param {number} companyId The ID of the company.
     * @param {GetNewReceivedDocumentTotalsRequest} [getNewReceivedDocumentTotalsRequest] Received document.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceivedDocumentsApi
     */
    public getNewReceivedDocumentTotals(companyId: number, getNewReceivedDocumentTotalsRequest?: GetNewReceivedDocumentTotalsRequest, options?: AxiosRequestConfig) {
        return ReceivedDocumentsApiFp(this.configuration).getNewReceivedDocumentTotals(companyId, getNewReceivedDocumentTotalsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the specified document.
     * @summary Get Received Document
     * @param {number} companyId The ID of the company.
     * @param {number} documentId The ID of the document.
     * @param {string} [fields] List of comma-separated fields.
     * @param {'basic' | 'detailed'} [fieldset] Name of the fieldset.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceivedDocumentsApi
     */
    public getReceivedDocument(companyId: number, documentId: number, fields?: string, fieldset?: 'basic' | 'detailed', options?: AxiosRequestConfig) {
        return ReceivedDocumentsApiFp(this.configuration).getReceivedDocument(companyId, documentId, fields, fieldset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the information useful while creating a new document.
     * @summary Get Received Document Pre-Create Info
     * @param {number} companyId The ID of the company.
     * @param {'expense' | 'passive_credit_note' | 'passive_delivery_note'} type The type of the received document.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceivedDocumentsApi
     */
    public getReceivedDocumentPreCreateInfo(companyId: number, type: 'expense' | 'passive_credit_note' | 'passive_delivery_note', options?: AxiosRequestConfig) {
        return ReceivedDocumentsApiFp(this.configuration).getReceivedDocumentPreCreateInfo(companyId, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists the received documents.
     * @summary List Received Documents
     * @param {number} companyId The ID of the company.
     * @param {'expense' | 'passive_credit_note' | 'passive_delivery_note'} type The type of the received document.
     * @param {string} [fields] List of comma-separated fields.
     * @param {'basic' | 'detailed'} [fieldset] Name of the fieldset.
     * @param {string} [sort] List of comma-separated fields for result sorting (minus for desc sorting).
     * @param {number} [page] The page to retrieve.
     * @param {number} [perPage] The size of the page.
     * @param {string} [q] Query for filtering the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceivedDocumentsApi
     */
    public listReceivedDocuments(companyId: number, type: 'expense' | 'passive_credit_note' | 'passive_delivery_note', fields?: string, fieldset?: 'basic' | 'detailed', sort?: string, page?: number, perPage?: number, q?: string, options?: AxiosRequestConfig) {
        return ReceivedDocumentsApiFp(this.configuration).listReceivedDocuments(companyId, type, fields, fieldset, sort, page, perPage, q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modifies the specified document.
     * @summary Modify Received Document
     * @param {number} companyId The ID of the company.
     * @param {number} documentId The ID of the document.
     * @param {ModifyReceivedDocumentRequest} [modifyReceivedDocumentRequest] Modified document.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceivedDocumentsApi
     */
    public modifyReceivedDocument(companyId: number, documentId: number, modifyReceivedDocumentRequest?: ModifyReceivedDocumentRequest, options?: AxiosRequestConfig) {
        return ReceivedDocumentsApiFp(this.configuration).modifyReceivedDocument(companyId, documentId, modifyReceivedDocumentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Uploads an attachment destined to a received document. The actual association between the document and the attachment must be implemented separately, using the returned token.
     * @summary Upload Received Document Attachment
     * @param {number} companyId The ID of the company.
     * @param {string} [filename] Name of the file.
     * @param {any} [attachment] Valid format: .png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceivedDocumentsApi
     */
    public uploadReceivedDocumentAttachment(companyId: number, filename?: string, attachment?: any, options?: AxiosRequestConfig) {
        return ReceivedDocumentsApiFp(this.configuration).uploadReceivedDocumentAttachment(companyId, filename, attachment, options).then((request) => request(this.axios, this.basePath));
    }
}
