/* tslint:disable */
/* eslint-disable */
/**
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.20
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../../configuration';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
import FormData from 'form-data'
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../base';
// @ts-ignore
import { ListArchiveCategoriesResponse } from '../../src/models';
// @ts-ignore
import { ListCitiesResponse } from '../../src/models';
// @ts-ignore
import { ListCostCentersResponse } from '../../src/models';
// @ts-ignore
import { ListCountriesResponse } from '../../src/models';
// @ts-ignore
import { ListCurrenciesResponse } from '../../src/models';
// @ts-ignore
import { ListDeliveryNotesDefaultCausalsResponse } from '../../src/models';
// @ts-ignore
import { ListDetailedCountriesResponse } from '../../src/models';
// @ts-ignore
import { ListLanguagesResponse } from '../../src/models';
// @ts-ignore
import { ListPaymentAccountsResponse } from '../../src/models';
// @ts-ignore
import { ListPaymentMethodsResponse } from '../../src/models';
// @ts-ignore
import { ListProductCategoriesResponse } from '../../src/models';
// @ts-ignore
import { ListReceivedDocumentCategoriesResponse } from '../../src/models';
// @ts-ignore
import { ListRevenueCentersResponse } from '../../src/models';
// @ts-ignore
import { ListTemplatesResponse } from '../../src/models';
// @ts-ignore
import { ListUnitsOfMeasureResponse } from '../../src/models';
// @ts-ignore
import { ListVatTypesResponse } from '../../src/models';
/**
 * InfoApi - axios parameter creator
 * @export
 */
export const InfoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Lists the archive categories.
         * @summary List Archive Categories
         * @param {number} companyId The ID of the company.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listArchiveCategories: async (companyId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listArchiveCategories', 'companyId', companyId)
            const localVarPath = `/c/{company_id}/info/archive_categories`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the Italian cities.
         * @summary List Cities
         * @param {string} [postalCode] Postal code for filtering.
         * @param {string} [city] City for filtering (ignored if postal_code is passed).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCities: async (postalCode?: string, city?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/info/cities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", [], configuration)

            if (postalCode !== undefined) {
                localVarQueryParameter['postal_code'] = postalCode;
            }

            if (city !== undefined) {
                localVarQueryParameter['city'] = city;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the cost centers.
         * @summary List Cost Centers
         * @param {number} companyId The ID of the company.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCostCenters: async (companyId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listCostCenters', 'companyId', companyId)
            const localVarPath = `/c/{company_id}/info/cost_centers`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the supported countries.
         * @summary List Countries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCountries: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/info/countries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the supported currencies.
         * @summary List Currencies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCurrencies: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/info/currencies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the delivery note default causals.
         * @summary List Delivery Notes Default Causals
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDeliveryNotesDefaultCausals: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/info/dn_causals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the supported countries.
         * @summary List Detailed Countries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDetailedCountries: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/info/detailed_countries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the supported languages.
         * @summary List Languages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLanguages: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/info/languages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the available payment accounts.
         * @summary List Payment Accounts
         * @param {number} companyId The ID of the company.
         * @param {string} [fields] List of comma-separated fields.
         * @param {'basic' | 'detailed'} [fieldset] Name of the fieldset.
         * @param {string} [sort] List of comma-separated fields for result sorting (minus for desc sorting).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPaymentAccounts: async (companyId: number, fields?: string, fieldset?: 'basic' | 'detailed', sort?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listPaymentAccounts', 'companyId', companyId)
            const localVarPath = `/c/{company_id}/info/payment_accounts`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", [], configuration)

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (fieldset !== undefined) {
                localVarQueryParameter['fieldset'] = fieldset;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the available payment methods.
         * @summary List Payment Methods
         * @param {number} companyId The ID of the company.
         * @param {string} [fields] List of comma-separated fields.
         * @param {'basic' | 'detailed'} [fieldset] Name of the fieldset.
         * @param {string} [sort] List of comma-separated fields for result sorting (minus for desc sorting).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPaymentMethods: async (companyId: number, fields?: string, fieldset?: 'basic' | 'detailed', sort?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listPaymentMethods', 'companyId', companyId)
            const localVarPath = `/c/{company_id}/info/payment_methods`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", [], configuration)

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (fieldset !== undefined) {
                localVarQueryParameter['fieldset'] = fieldset;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the product categories.
         * @summary List Product Categories
         * @param {number} companyId The ID of the company.
         * @param {'products' | 'issued_documents' | 'received_documents'} context 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProductCategories: async (companyId: number, context: 'products' | 'issued_documents' | 'received_documents', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listProductCategories', 'companyId', companyId)
            // verify required parameter 'context' is not null or undefined
            assertParamExists('listProductCategories', 'context', context)
            const localVarPath = `/c/{company_id}/info/product_categories`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", [], configuration)

            if (context !== undefined) {
                localVarQueryParameter['context'] = context;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the received document categories.
         * @summary List Received Document Categories
         * @param {number} companyId The ID of the company.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listReceivedDocumentCategories: async (companyId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listReceivedDocumentCategories', 'companyId', companyId)
            const localVarPath = `/c/{company_id}/info/received_document_categories`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the revenue centers.
         * @summary List Revenue Centers
         * @param {number} companyId The ID of the company.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRevenueCenters: async (companyId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listRevenueCenters', 'companyId', companyId)
            const localVarPath = `/c/{company_id}/info/revenue_centers`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the available templates.
         * @summary List Templates
         * @param {'all' | 'standard' | 'delivery_note' | 'accompanying_invoice'} [type] Type of the templates.
         * @param {boolean} [byType] [Only if type&#x3D;all] If true, splits the list in objects, grouping templates by type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTemplates: async (type?: 'all' | 'standard' | 'delivery_note' | 'accompanying_invoice', byType?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/info/templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", [], configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (byType !== undefined) {
                localVarQueryParameter['by_type'] = byType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the units of measure.
         * @summary List Units of Measure
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUnitsOfMeasure: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/info/measures`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the available vat types.
         * @summary List Vat Types
         * @param {number} companyId The ID of the company.
         * @param {'basic' | 'detailed'} [fieldset] Name of the fieldset.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVatTypes: async (companyId: number, fieldset?: 'basic' | 'detailed', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listVatTypes', 'companyId', companyId)
            const localVarPath = `/c/{company_id}/info/vat_types`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", ["settings:r"], configuration)

            if (fieldset !== undefined) {
                localVarQueryParameter['fieldset'] = fieldset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InfoApi - functional programming interface
 * @export
 */
export const InfoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InfoApiAxiosParamCreator(configuration)
    return {
        /**
         * Lists the archive categories.
         * @summary List Archive Categories
         * @param {number} companyId The ID of the company.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listArchiveCategories(companyId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListArchiveCategoriesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listArchiveCategories(companyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists the Italian cities.
         * @summary List Cities
         * @param {string} [postalCode] Postal code for filtering.
         * @param {string} [city] City for filtering (ignored if postal_code is passed).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCities(postalCode?: string, city?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListCitiesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCities(postalCode, city, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists the cost centers.
         * @summary List Cost Centers
         * @param {number} companyId The ID of the company.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCostCenters(companyId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListCostCentersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCostCenters(companyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists the supported countries.
         * @summary List Countries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCountries(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListCountriesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCountries(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists the supported currencies.
         * @summary List Currencies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCurrencies(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListCurrenciesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCurrencies(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists the delivery note default causals.
         * @summary List Delivery Notes Default Causals
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDeliveryNotesDefaultCausals(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListDeliveryNotesDefaultCausalsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDeliveryNotesDefaultCausals(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists the supported countries.
         * @summary List Detailed Countries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDetailedCountries(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListDetailedCountriesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDetailedCountries(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists the supported languages.
         * @summary List Languages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listLanguages(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListLanguagesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listLanguages(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists the available payment accounts.
         * @summary List Payment Accounts
         * @param {number} companyId The ID of the company.
         * @param {string} [fields] List of comma-separated fields.
         * @param {'basic' | 'detailed'} [fieldset] Name of the fieldset.
         * @param {string} [sort] List of comma-separated fields for result sorting (minus for desc sorting).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPaymentAccounts(companyId: number, fields?: string, fieldset?: 'basic' | 'detailed', sort?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListPaymentAccountsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPaymentAccounts(companyId, fields, fieldset, sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists the available payment methods.
         * @summary List Payment Methods
         * @param {number} companyId The ID of the company.
         * @param {string} [fields] List of comma-separated fields.
         * @param {'basic' | 'detailed'} [fieldset] Name of the fieldset.
         * @param {string} [sort] List of comma-separated fields for result sorting (minus for desc sorting).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPaymentMethods(companyId: number, fields?: string, fieldset?: 'basic' | 'detailed', sort?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListPaymentMethodsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPaymentMethods(companyId, fields, fieldset, sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists the product categories.
         * @summary List Product Categories
         * @param {number} companyId The ID of the company.
         * @param {'products' | 'issued_documents' | 'received_documents'} context 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProductCategories(companyId: number, context: 'products' | 'issued_documents' | 'received_documents', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListProductCategoriesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listProductCategories(companyId, context, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists the received document categories.
         * @summary List Received Document Categories
         * @param {number} companyId The ID of the company.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listReceivedDocumentCategories(companyId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListReceivedDocumentCategoriesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listReceivedDocumentCategories(companyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists the revenue centers.
         * @summary List Revenue Centers
         * @param {number} companyId The ID of the company.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRevenueCenters(companyId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListRevenueCentersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRevenueCenters(companyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists the available templates.
         * @summary List Templates
         * @param {'all' | 'standard' | 'delivery_note' | 'accompanying_invoice'} [type] Type of the templates.
         * @param {boolean} [byType] [Only if type&#x3D;all] If true, splits the list in objects, grouping templates by type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTemplates(type?: 'all' | 'standard' | 'delivery_note' | 'accompanying_invoice', byType?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListTemplatesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTemplates(type, byType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists the units of measure.
         * @summary List Units of Measure
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUnitsOfMeasure(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListUnitsOfMeasureResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUnitsOfMeasure(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists the available vat types.
         * @summary List Vat Types
         * @param {number} companyId The ID of the company.
         * @param {'basic' | 'detailed'} [fieldset] Name of the fieldset.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listVatTypes(companyId: number, fieldset?: 'basic' | 'detailed', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListVatTypesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listVatTypes(companyId, fieldset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InfoApi - factory interface
 * @export
 */
export const InfoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InfoApiFp(configuration)
    return {
        /**
         * Lists the archive categories.
         * @summary List Archive Categories
         * @param {number} companyId The ID of the company.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listArchiveCategories(companyId: number, options?: any): AxiosPromise<ListArchiveCategoriesResponse> {
            return localVarFp.listArchiveCategories(companyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists the Italian cities.
         * @summary List Cities
         * @param {string} [postalCode] Postal code for filtering.
         * @param {string} [city] City for filtering (ignored if postal_code is passed).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCities(postalCode?: string, city?: string, options?: any): AxiosPromise<ListCitiesResponse> {
            return localVarFp.listCities(postalCode, city, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists the cost centers.
         * @summary List Cost Centers
         * @param {number} companyId The ID of the company.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCostCenters(companyId: number, options?: any): AxiosPromise<ListCostCentersResponse> {
            return localVarFp.listCostCenters(companyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists the supported countries.
         * @summary List Countries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCountries(options?: any): AxiosPromise<ListCountriesResponse> {
            return localVarFp.listCountries(options).then((request) => request(axios, basePath));
        },
        /**
         * Lists the supported currencies.
         * @summary List Currencies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCurrencies(options?: any): AxiosPromise<ListCurrenciesResponse> {
            return localVarFp.listCurrencies(options).then((request) => request(axios, basePath));
        },
        /**
         * Lists the delivery note default causals.
         * @summary List Delivery Notes Default Causals
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDeliveryNotesDefaultCausals(options?: any): AxiosPromise<ListDeliveryNotesDefaultCausalsResponse> {
            return localVarFp.listDeliveryNotesDefaultCausals(options).then((request) => request(axios, basePath));
        },
        /**
         * Lists the supported countries.
         * @summary List Detailed Countries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDetailedCountries(options?: any): AxiosPromise<ListDetailedCountriesResponse> {
            return localVarFp.listDetailedCountries(options).then((request) => request(axios, basePath));
        },
        /**
         * Lists the supported languages.
         * @summary List Languages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLanguages(options?: any): AxiosPromise<ListLanguagesResponse> {
            return localVarFp.listLanguages(options).then((request) => request(axios, basePath));
        },
        /**
         * Lists the available payment accounts.
         * @summary List Payment Accounts
         * @param {number} companyId The ID of the company.
         * @param {string} [fields] List of comma-separated fields.
         * @param {'basic' | 'detailed'} [fieldset] Name of the fieldset.
         * @param {string} [sort] List of comma-separated fields for result sorting (minus for desc sorting).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPaymentAccounts(companyId: number, fields?: string, fieldset?: 'basic' | 'detailed', sort?: string, options?: any): AxiosPromise<ListPaymentAccountsResponse> {
            return localVarFp.listPaymentAccounts(companyId, fields, fieldset, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists the available payment methods.
         * @summary List Payment Methods
         * @param {number} companyId The ID of the company.
         * @param {string} [fields] List of comma-separated fields.
         * @param {'basic' | 'detailed'} [fieldset] Name of the fieldset.
         * @param {string} [sort] List of comma-separated fields for result sorting (minus for desc sorting).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPaymentMethods(companyId: number, fields?: string, fieldset?: 'basic' | 'detailed', sort?: string, options?: any): AxiosPromise<ListPaymentMethodsResponse> {
            return localVarFp.listPaymentMethods(companyId, fields, fieldset, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists the product categories.
         * @summary List Product Categories
         * @param {number} companyId The ID of the company.
         * @param {'products' | 'issued_documents' | 'received_documents'} context 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProductCategories(companyId: number, context: 'products' | 'issued_documents' | 'received_documents', options?: any): AxiosPromise<ListProductCategoriesResponse> {
            return localVarFp.listProductCategories(companyId, context, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists the received document categories.
         * @summary List Received Document Categories
         * @param {number} companyId The ID of the company.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listReceivedDocumentCategories(companyId: number, options?: any): AxiosPromise<ListReceivedDocumentCategoriesResponse> {
            return localVarFp.listReceivedDocumentCategories(companyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists the revenue centers.
         * @summary List Revenue Centers
         * @param {number} companyId The ID of the company.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRevenueCenters(companyId: number, options?: any): AxiosPromise<ListRevenueCentersResponse> {
            return localVarFp.listRevenueCenters(companyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists the available templates.
         * @summary List Templates
         * @param {'all' | 'standard' | 'delivery_note' | 'accompanying_invoice'} [type] Type of the templates.
         * @param {boolean} [byType] [Only if type&#x3D;all] If true, splits the list in objects, grouping templates by type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTemplates(type?: 'all' | 'standard' | 'delivery_note' | 'accompanying_invoice', byType?: boolean, options?: any): AxiosPromise<ListTemplatesResponse> {
            return localVarFp.listTemplates(type, byType, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists the units of measure.
         * @summary List Units of Measure
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUnitsOfMeasure(options?: any): AxiosPromise<ListUnitsOfMeasureResponse> {
            return localVarFp.listUnitsOfMeasure(options).then((request) => request(axios, basePath));
        },
        /**
         * Lists the available vat types.
         * @summary List Vat Types
         * @param {number} companyId The ID of the company.
         * @param {'basic' | 'detailed'} [fieldset] Name of the fieldset.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVatTypes(companyId: number, fieldset?: 'basic' | 'detailed', options?: any): AxiosPromise<ListVatTypesResponse> {
            return localVarFp.listVatTypes(companyId, fieldset, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InfoApi - interface
 * @export
 * @interface InfoApi
 */
export interface InfoApiInterface {
    /**
     * Lists the archive categories.
     * @summary List Archive Categories
     * @param {number} companyId The ID of the company.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApiInterface
     */
    listArchiveCategories(companyId: number, options?: AxiosRequestConfig): AxiosPromise<ListArchiveCategoriesResponse>;

    /**
     * Lists the Italian cities.
     * @summary List Cities
     * @param {string} [postalCode] Postal code for filtering.
     * @param {string} [city] City for filtering (ignored if postal_code is passed).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApiInterface
     */
    listCities(postalCode?: string, city?: string, options?: AxiosRequestConfig): AxiosPromise<ListCitiesResponse>;

    /**
     * Lists the cost centers.
     * @summary List Cost Centers
     * @param {number} companyId The ID of the company.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApiInterface
     */
    listCostCenters(companyId: number, options?: AxiosRequestConfig): AxiosPromise<ListCostCentersResponse>;

    /**
     * Lists the supported countries.
     * @summary List Countries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApiInterface
     */
    listCountries(options?: AxiosRequestConfig): AxiosPromise<ListCountriesResponse>;

    /**
     * Lists the supported currencies.
     * @summary List Currencies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApiInterface
     */
    listCurrencies(options?: AxiosRequestConfig): AxiosPromise<ListCurrenciesResponse>;

    /**
     * Lists the delivery note default causals.
     * @summary List Delivery Notes Default Causals
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApiInterface
     */
    listDeliveryNotesDefaultCausals(options?: AxiosRequestConfig): AxiosPromise<ListDeliveryNotesDefaultCausalsResponse>;

    /**
     * Lists the supported countries.
     * @summary List Detailed Countries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApiInterface
     */
    listDetailedCountries(options?: AxiosRequestConfig): AxiosPromise<ListDetailedCountriesResponse>;

    /**
     * Lists the supported languages.
     * @summary List Languages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApiInterface
     */
    listLanguages(options?: AxiosRequestConfig): AxiosPromise<ListLanguagesResponse>;

    /**
     * Lists the available payment accounts.
     * @summary List Payment Accounts
     * @param {number} companyId The ID of the company.
     * @param {string} [fields] List of comma-separated fields.
     * @param {'basic' | 'detailed'} [fieldset] Name of the fieldset.
     * @param {string} [sort] List of comma-separated fields for result sorting (minus for desc sorting).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApiInterface
     */
    listPaymentAccounts(companyId: number, fields?: string, fieldset?: 'basic' | 'detailed', sort?: string, options?: AxiosRequestConfig): AxiosPromise<ListPaymentAccountsResponse>;

    /**
     * Lists the available payment methods.
     * @summary List Payment Methods
     * @param {number} companyId The ID of the company.
     * @param {string} [fields] List of comma-separated fields.
     * @param {'basic' | 'detailed'} [fieldset] Name of the fieldset.
     * @param {string} [sort] List of comma-separated fields for result sorting (minus for desc sorting).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApiInterface
     */
    listPaymentMethods(companyId: number, fields?: string, fieldset?: 'basic' | 'detailed', sort?: string, options?: AxiosRequestConfig): AxiosPromise<ListPaymentMethodsResponse>;

    /**
     * Lists the product categories.
     * @summary List Product Categories
     * @param {number} companyId The ID of the company.
     * @param {'products' | 'issued_documents' | 'received_documents'} context 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApiInterface
     */
    listProductCategories(companyId: number, context: 'products' | 'issued_documents' | 'received_documents', options?: AxiosRequestConfig): AxiosPromise<ListProductCategoriesResponse>;

    /**
     * Lists the received document categories.
     * @summary List Received Document Categories
     * @param {number} companyId The ID of the company.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApiInterface
     */
    listReceivedDocumentCategories(companyId: number, options?: AxiosRequestConfig): AxiosPromise<ListReceivedDocumentCategoriesResponse>;

    /**
     * Lists the revenue centers.
     * @summary List Revenue Centers
     * @param {number} companyId The ID of the company.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApiInterface
     */
    listRevenueCenters(companyId: number, options?: AxiosRequestConfig): AxiosPromise<ListRevenueCentersResponse>;

    /**
     * Lists the available templates.
     * @summary List Templates
     * @param {'all' | 'standard' | 'delivery_note' | 'accompanying_invoice'} [type] Type of the templates.
     * @param {boolean} [byType] [Only if type&#x3D;all] If true, splits the list in objects, grouping templates by type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApiInterface
     */
    listTemplates(type?: 'all' | 'standard' | 'delivery_note' | 'accompanying_invoice', byType?: boolean, options?: AxiosRequestConfig): AxiosPromise<ListTemplatesResponse>;

    /**
     * Lists the units of measure.
     * @summary List Units of Measure
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApiInterface
     */
    listUnitsOfMeasure(options?: AxiosRequestConfig): AxiosPromise<ListUnitsOfMeasureResponse>;

    /**
     * Lists the available vat types.
     * @summary List Vat Types
     * @param {number} companyId The ID of the company.
     * @param {'basic' | 'detailed'} [fieldset] Name of the fieldset.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApiInterface
     */
    listVatTypes(companyId: number, fieldset?: 'basic' | 'detailed', options?: AxiosRequestConfig): AxiosPromise<ListVatTypesResponse>;

}

/**
 * InfoApi - object-oriented interface
 * @export
 * @class InfoApi
 * @extends {BaseAPI}
 */
export class InfoApi extends BaseAPI implements InfoApiInterface {
    /**
     * Lists the archive categories.
     * @summary List Archive Categories
     * @param {number} companyId The ID of the company.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApi
     */
    public listArchiveCategories(companyId: number, options?: AxiosRequestConfig) {
        return InfoApiFp(this.configuration).listArchiveCategories(companyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists the Italian cities.
     * @summary List Cities
     * @param {string} [postalCode] Postal code for filtering.
     * @param {string} [city] City for filtering (ignored if postal_code is passed).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApi
     */
    public listCities(postalCode?: string, city?: string, options?: AxiosRequestConfig) {
        return InfoApiFp(this.configuration).listCities(postalCode, city, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists the cost centers.
     * @summary List Cost Centers
     * @param {number} companyId The ID of the company.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApi
     */
    public listCostCenters(companyId: number, options?: AxiosRequestConfig) {
        return InfoApiFp(this.configuration).listCostCenters(companyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists the supported countries.
     * @summary List Countries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApi
     */
    public listCountries(options?: AxiosRequestConfig) {
        return InfoApiFp(this.configuration).listCountries(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists the supported currencies.
     * @summary List Currencies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApi
     */
    public listCurrencies(options?: AxiosRequestConfig) {
        return InfoApiFp(this.configuration).listCurrencies(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists the delivery note default causals.
     * @summary List Delivery Notes Default Causals
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApi
     */
    public listDeliveryNotesDefaultCausals(options?: AxiosRequestConfig) {
        return InfoApiFp(this.configuration).listDeliveryNotesDefaultCausals(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists the supported countries.
     * @summary List Detailed Countries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApi
     */
    public listDetailedCountries(options?: AxiosRequestConfig) {
        return InfoApiFp(this.configuration).listDetailedCountries(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists the supported languages.
     * @summary List Languages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApi
     */
    public listLanguages(options?: AxiosRequestConfig) {
        return InfoApiFp(this.configuration).listLanguages(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists the available payment accounts.
     * @summary List Payment Accounts
     * @param {number} companyId The ID of the company.
     * @param {string} [fields] List of comma-separated fields.
     * @param {'basic' | 'detailed'} [fieldset] Name of the fieldset.
     * @param {string} [sort] List of comma-separated fields for result sorting (minus for desc sorting).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApi
     */
    public listPaymentAccounts(companyId: number, fields?: string, fieldset?: 'basic' | 'detailed', sort?: string, options?: AxiosRequestConfig) {
        return InfoApiFp(this.configuration).listPaymentAccounts(companyId, fields, fieldset, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists the available payment methods.
     * @summary List Payment Methods
     * @param {number} companyId The ID of the company.
     * @param {string} [fields] List of comma-separated fields.
     * @param {'basic' | 'detailed'} [fieldset] Name of the fieldset.
     * @param {string} [sort] List of comma-separated fields for result sorting (minus for desc sorting).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApi
     */
    public listPaymentMethods(companyId: number, fields?: string, fieldset?: 'basic' | 'detailed', sort?: string, options?: AxiosRequestConfig) {
        return InfoApiFp(this.configuration).listPaymentMethods(companyId, fields, fieldset, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists the product categories.
     * @summary List Product Categories
     * @param {number} companyId The ID of the company.
     * @param {'products' | 'issued_documents' | 'received_documents'} context 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApi
     */
    public listProductCategories(companyId: number, context: 'products' | 'issued_documents' | 'received_documents', options?: AxiosRequestConfig) {
        return InfoApiFp(this.configuration).listProductCategories(companyId, context, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists the received document categories.
     * @summary List Received Document Categories
     * @param {number} companyId The ID of the company.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApi
     */
    public listReceivedDocumentCategories(companyId: number, options?: AxiosRequestConfig) {
        return InfoApiFp(this.configuration).listReceivedDocumentCategories(companyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists the revenue centers.
     * @summary List Revenue Centers
     * @param {number} companyId The ID of the company.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApi
     */
    public listRevenueCenters(companyId: number, options?: AxiosRequestConfig) {
        return InfoApiFp(this.configuration).listRevenueCenters(companyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists the available templates.
     * @summary List Templates
     * @param {'all' | 'standard' | 'delivery_note' | 'accompanying_invoice'} [type] Type of the templates.
     * @param {boolean} [byType] [Only if type&#x3D;all] If true, splits the list in objects, grouping templates by type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApi
     */
    public listTemplates(type?: 'all' | 'standard' | 'delivery_note' | 'accompanying_invoice', byType?: boolean, options?: AxiosRequestConfig) {
        return InfoApiFp(this.configuration).listTemplates(type, byType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists the units of measure.
     * @summary List Units of Measure
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApi
     */
    public listUnitsOfMeasure(options?: AxiosRequestConfig) {
        return InfoApiFp(this.configuration).listUnitsOfMeasure(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists the available vat types.
     * @summary List Vat Types
     * @param {number} companyId The ID of the company.
     * @param {'basic' | 'detailed'} [fieldset] Name of the fieldset.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApi
     */
    public listVatTypes(companyId: number, fieldset?: 'basic' | 'detailed', options?: AxiosRequestConfig) {
        return InfoApiFp(this.configuration).listVatTypes(companyId, fieldset, options).then((request) => request(this.axios, this.basePath));
    }
}
