/* tslint:disable */
/* eslint-disable */
/**
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.14
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../../configuration';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
import FormData from 'form-data'
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../base';
// @ts-ignore
import { CreatePaymentAccountRequest } from '../../src/models';
// @ts-ignore
import { CreatePaymentAccountResponse } from '../../src/models';
// @ts-ignore
import { CreatePaymentMethodRequest } from '../../src/models';
// @ts-ignore
import { CreatePaymentMethodResponse } from '../../src/models';
// @ts-ignore
import { CreateVatTypeRequest } from '../../src/models';
// @ts-ignore
import { CreateVatTypeResponse } from '../../src/models';
// @ts-ignore
import { GetPaymentAccountResponse } from '../../src/models';
// @ts-ignore
import { GetPaymentMethodResponse } from '../../src/models';
// @ts-ignore
import { GetVatTypeResponse } from '../../src/models';
// @ts-ignore
import { ModifyPaymentAccountRequest } from '../../src/models';
// @ts-ignore
import { ModifyPaymentAccountResponse } from '../../src/models';
// @ts-ignore
import { ModifyPaymentMethodRequest } from '../../src/models';
// @ts-ignore
import { ModifyPaymentMethodResponse } from '../../src/models';
// @ts-ignore
import { ModifyVatTypeRequest } from '../../src/models';
// @ts-ignore
import { ModifyVatTypeResponse } from '../../src/models';
/**
 * SettingsApi - axios parameter creator
 * @export
 */
export const SettingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new payment account.
         * @summary Create Payment Account
         * @param {number} companyId The ID of the company.
         * @param {CreatePaymentAccountRequest} [createPaymentAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPaymentAccount: async (companyId: number, createPaymentAccountRequest?: CreatePaymentAccountRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('createPaymentAccount', 'companyId', companyId)
            const localVarPath = `/c/{company_id}/settings/payment_accounts`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", ["settings:a"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPaymentAccountRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new payment method.
         * @summary Create Payment Method
         * @param {number} companyId The ID of the company.
         * @param {CreatePaymentMethodRequest} [createPaymentMethodRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPaymentMethod: async (companyId: number, createPaymentMethodRequest?: CreatePaymentMethodRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('createPaymentMethod', 'companyId', companyId)
            const localVarPath = `/c/{company_id}/settings/payment_methods`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", ["settings:a"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPaymentMethodRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a vat type.
         * @summary Create Vat Type
         * @param {number} companyId The ID of the company.
         * @param {CreateVatTypeRequest} [createVatTypeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVatType: async (companyId: number, createVatTypeRequest?: CreateVatTypeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('createVatType', 'companyId', companyId)
            const localVarPath = `/c/{company_id}/settings/vat_types`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", ["settings:a"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createVatTypeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the specified payment account.
         * @summary Delete Payment Account
         * @param {number} companyId The ID of the company.
         * @param {number} paymentAccountId The Referred Payment Account Id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePaymentAccount: async (companyId: number, paymentAccountId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deletePaymentAccount', 'companyId', companyId)
            // verify required parameter 'paymentAccountId' is not null or undefined
            assertParamExists('deletePaymentAccount', 'paymentAccountId', paymentAccountId)
            const localVarPath = `/c/{company_id}/settings/payment_accounts/{payment_account_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"payment_account_id"}}`, encodeURIComponent(String(paymentAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", ["settings:a"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the specified payment method.
         * @summary Delete Payment Method
         * @param {number} companyId The ID of the company.
         * @param {number} paymentMethodId The Referred Payment Method Id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePaymentMethod: async (companyId: number, paymentMethodId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deletePaymentMethod', 'companyId', companyId)
            // verify required parameter 'paymentMethodId' is not null or undefined
            assertParamExists('deletePaymentMethod', 'paymentMethodId', paymentMethodId)
            const localVarPath = `/c/{company_id}/settings/payment_methods/{payment_method_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"payment_method_id"}}`, encodeURIComponent(String(paymentMethodId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", ["settings:a"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the specified vat type.
         * @summary Delete Vat Type
         * @param {number} companyId The ID of the company.
         * @param {number} vatTypeId The Referred Vat Type Id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVatType: async (companyId: number, vatTypeId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteVatType', 'companyId', companyId)
            // verify required parameter 'vatTypeId' is not null or undefined
            assertParamExists('deleteVatType', 'vatTypeId', vatTypeId)
            const localVarPath = `/c/{company_id}/settings/vat_types/{vat_type_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"vat_type_id"}}`, encodeURIComponent(String(vatTypeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", ["settings:a"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the specified payment account.
         * @summary Get Payment Account
         * @param {number} companyId The ID of the company.
         * @param {number} paymentAccountId The Referred Payment Account Id.
         * @param {string} [fields] List of comma-separated fields.
         * @param {'basic' | 'detailed'} [fieldset] Name of the fieldset.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentAccount: async (companyId: number, paymentAccountId: number, fields?: string, fieldset?: 'basic' | 'detailed', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getPaymentAccount', 'companyId', companyId)
            // verify required parameter 'paymentAccountId' is not null or undefined
            assertParamExists('getPaymentAccount', 'paymentAccountId', paymentAccountId)
            const localVarPath = `/c/{company_id}/settings/payment_accounts/{payment_account_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"payment_account_id"}}`, encodeURIComponent(String(paymentAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", [], configuration)

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (fieldset !== undefined) {
                localVarQueryParameter['fieldset'] = fieldset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the specified payment method.
         * @summary Get Payment Method
         * @param {number} companyId The ID of the company.
         * @param {number} paymentMethodId The Referred Payment Method Id.
         * @param {string} [fields] List of comma-separated fields.
         * @param {'basic' | 'detailed'} [fieldset] Name of the fieldset.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentMethod: async (companyId: number, paymentMethodId: number, fields?: string, fieldset?: 'basic' | 'detailed', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getPaymentMethod', 'companyId', companyId)
            // verify required parameter 'paymentMethodId' is not null or undefined
            assertParamExists('getPaymentMethod', 'paymentMethodId', paymentMethodId)
            const localVarPath = `/c/{company_id}/settings/payment_methods/{payment_method_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"payment_method_id"}}`, encodeURIComponent(String(paymentMethodId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", [], configuration)

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (fieldset !== undefined) {
                localVarQueryParameter['fieldset'] = fieldset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the specified vat type.
         * @summary Get Vat Type
         * @param {number} companyId The ID of the company.
         * @param {number} vatTypeId The Referred Vat Type Id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVatType: async (companyId: number, vatTypeId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getVatType', 'companyId', companyId)
            // verify required parameter 'vatTypeId' is not null or undefined
            assertParamExists('getVatType', 'vatTypeId', vatTypeId)
            const localVarPath = `/c/{company_id}/settings/vat_types/{vat_type_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"vat_type_id"}}`, encodeURIComponent(String(vatTypeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modifies the specified payment account.
         * @summary Modify Payment Account
         * @param {number} companyId The ID of the company.
         * @param {number} paymentAccountId The Referred Payment Account Id.
         * @param {ModifyPaymentAccountRequest} [modifyPaymentAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyPaymentAccount: async (companyId: number, paymentAccountId: number, modifyPaymentAccountRequest?: ModifyPaymentAccountRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('modifyPaymentAccount', 'companyId', companyId)
            // verify required parameter 'paymentAccountId' is not null or undefined
            assertParamExists('modifyPaymentAccount', 'paymentAccountId', paymentAccountId)
            const localVarPath = `/c/{company_id}/settings/payment_accounts/{payment_account_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"payment_account_id"}}`, encodeURIComponent(String(paymentAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", ["settings:a"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyPaymentAccountRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modifies the specified payment method.
         * @summary Modify Payment Method
         * @param {number} companyId The ID of the company.
         * @param {number} paymentMethodId The Referred Payment Method Id.
         * @param {ModifyPaymentMethodRequest} [modifyPaymentMethodRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyPaymentMethod: async (companyId: number, paymentMethodId: number, modifyPaymentMethodRequest?: ModifyPaymentMethodRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('modifyPaymentMethod', 'companyId', companyId)
            // verify required parameter 'paymentMethodId' is not null or undefined
            assertParamExists('modifyPaymentMethod', 'paymentMethodId', paymentMethodId)
            const localVarPath = `/c/{company_id}/settings/payment_methods/{payment_method_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"payment_method_id"}}`, encodeURIComponent(String(paymentMethodId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", ["settings:a"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyPaymentMethodRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modifies the specified vat type.
         * @summary Modify Vat Type
         * @param {number} companyId The ID of the company.
         * @param {number} vatTypeId The Referred Vat Type Id.
         * @param {ModifyVatTypeRequest} [modifyVatTypeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyVatType: async (companyId: number, vatTypeId: number, modifyVatTypeRequest?: ModifyVatTypeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('modifyVatType', 'companyId', companyId)
            // verify required parameter 'vatTypeId' is not null or undefined
            assertParamExists('modifyVatType', 'vatTypeId', vatTypeId)
            const localVarPath = `/c/{company_id}/settings/vat_types/{vat_type_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"vat_type_id"}}`, encodeURIComponent(String(vatTypeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", ["settings:a"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyVatTypeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SettingsApi - functional programming interface
 * @export
 */
export const SettingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SettingsApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new payment account.
         * @summary Create Payment Account
         * @param {number} companyId The ID of the company.
         * @param {CreatePaymentAccountRequest} [createPaymentAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPaymentAccount(companyId: number, createPaymentAccountRequest?: CreatePaymentAccountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatePaymentAccountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPaymentAccount(companyId, createPaymentAccountRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new payment method.
         * @summary Create Payment Method
         * @param {number} companyId The ID of the company.
         * @param {CreatePaymentMethodRequest} [createPaymentMethodRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPaymentMethod(companyId: number, createPaymentMethodRequest?: CreatePaymentMethodRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatePaymentMethodResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPaymentMethod(companyId, createPaymentMethodRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a vat type.
         * @summary Create Vat Type
         * @param {number} companyId The ID of the company.
         * @param {CreateVatTypeRequest} [createVatTypeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createVatType(companyId: number, createVatTypeRequest?: CreateVatTypeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateVatTypeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createVatType(companyId, createVatTypeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes the specified payment account.
         * @summary Delete Payment Account
         * @param {number} companyId The ID of the company.
         * @param {number} paymentAccountId The Referred Payment Account Id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePaymentAccount(companyId: number, paymentAccountId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePaymentAccount(companyId, paymentAccountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes the specified payment method.
         * @summary Delete Payment Method
         * @param {number} companyId The ID of the company.
         * @param {number} paymentMethodId The Referred Payment Method Id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePaymentMethod(companyId: number, paymentMethodId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePaymentMethod(companyId, paymentMethodId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes the specified vat type.
         * @summary Delete Vat Type
         * @param {number} companyId The ID of the company.
         * @param {number} vatTypeId The Referred Vat Type Id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteVatType(companyId: number, vatTypeId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteVatType(companyId, vatTypeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets the specified payment account.
         * @summary Get Payment Account
         * @param {number} companyId The ID of the company.
         * @param {number} paymentAccountId The Referred Payment Account Id.
         * @param {string} [fields] List of comma-separated fields.
         * @param {'basic' | 'detailed'} [fieldset] Name of the fieldset.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPaymentAccount(companyId: number, paymentAccountId: number, fields?: string, fieldset?: 'basic' | 'detailed', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPaymentAccountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPaymentAccount(companyId, paymentAccountId, fields, fieldset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets the specified payment method.
         * @summary Get Payment Method
         * @param {number} companyId The ID of the company.
         * @param {number} paymentMethodId The Referred Payment Method Id.
         * @param {string} [fields] List of comma-separated fields.
         * @param {'basic' | 'detailed'} [fieldset] Name of the fieldset.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPaymentMethod(companyId: number, paymentMethodId: number, fields?: string, fieldset?: 'basic' | 'detailed', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPaymentMethodResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPaymentMethod(companyId, paymentMethodId, fields, fieldset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets the specified vat type.
         * @summary Get Vat Type
         * @param {number} companyId The ID of the company.
         * @param {number} vatTypeId The Referred Vat Type Id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVatType(companyId: number, vatTypeId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetVatTypeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVatType(companyId, vatTypeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Modifies the specified payment account.
         * @summary Modify Payment Account
         * @param {number} companyId The ID of the company.
         * @param {number} paymentAccountId The Referred Payment Account Id.
         * @param {ModifyPaymentAccountRequest} [modifyPaymentAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyPaymentAccount(companyId: number, paymentAccountId: number, modifyPaymentAccountRequest?: ModifyPaymentAccountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyPaymentAccountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyPaymentAccount(companyId, paymentAccountId, modifyPaymentAccountRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Modifies the specified payment method.
         * @summary Modify Payment Method
         * @param {number} companyId The ID of the company.
         * @param {number} paymentMethodId The Referred Payment Method Id.
         * @param {ModifyPaymentMethodRequest} [modifyPaymentMethodRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyPaymentMethod(companyId: number, paymentMethodId: number, modifyPaymentMethodRequest?: ModifyPaymentMethodRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyPaymentMethodResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyPaymentMethod(companyId, paymentMethodId, modifyPaymentMethodRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Modifies the specified vat type.
         * @summary Modify Vat Type
         * @param {number} companyId The ID of the company.
         * @param {number} vatTypeId The Referred Vat Type Id.
         * @param {ModifyVatTypeRequest} [modifyVatTypeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyVatType(companyId: number, vatTypeId: number, modifyVatTypeRequest?: ModifyVatTypeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyVatTypeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyVatType(companyId, vatTypeId, modifyVatTypeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SettingsApi - factory interface
 * @export
 */
export const SettingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SettingsApiFp(configuration)
    return {
        /**
         * Creates a new payment account.
         * @summary Create Payment Account
         * @param {number} companyId The ID of the company.
         * @param {CreatePaymentAccountRequest} [createPaymentAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPaymentAccount(companyId: number, createPaymentAccountRequest?: CreatePaymentAccountRequest, options?: any): AxiosPromise<CreatePaymentAccountResponse> {
            return localVarFp.createPaymentAccount(companyId, createPaymentAccountRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new payment method.
         * @summary Create Payment Method
         * @param {number} companyId The ID of the company.
         * @param {CreatePaymentMethodRequest} [createPaymentMethodRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPaymentMethod(companyId: number, createPaymentMethodRequest?: CreatePaymentMethodRequest, options?: any): AxiosPromise<CreatePaymentMethodResponse> {
            return localVarFp.createPaymentMethod(companyId, createPaymentMethodRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a vat type.
         * @summary Create Vat Type
         * @param {number} companyId The ID of the company.
         * @param {CreateVatTypeRequest} [createVatTypeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVatType(companyId: number, createVatTypeRequest?: CreateVatTypeRequest, options?: any): AxiosPromise<CreateVatTypeResponse> {
            return localVarFp.createVatType(companyId, createVatTypeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes the specified payment account.
         * @summary Delete Payment Account
         * @param {number} companyId The ID of the company.
         * @param {number} paymentAccountId The Referred Payment Account Id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePaymentAccount(companyId: number, paymentAccountId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deletePaymentAccount(companyId, paymentAccountId, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes the specified payment method.
         * @summary Delete Payment Method
         * @param {number} companyId The ID of the company.
         * @param {number} paymentMethodId The Referred Payment Method Id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePaymentMethod(companyId: number, paymentMethodId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deletePaymentMethod(companyId, paymentMethodId, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes the specified vat type.
         * @summary Delete Vat Type
         * @param {number} companyId The ID of the company.
         * @param {number} vatTypeId The Referred Vat Type Id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVatType(companyId: number, vatTypeId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteVatType(companyId, vatTypeId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the specified payment account.
         * @summary Get Payment Account
         * @param {number} companyId The ID of the company.
         * @param {number} paymentAccountId The Referred Payment Account Id.
         * @param {string} [fields] List of comma-separated fields.
         * @param {'basic' | 'detailed'} [fieldset] Name of the fieldset.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentAccount(companyId: number, paymentAccountId: number, fields?: string, fieldset?: 'basic' | 'detailed', options?: any): AxiosPromise<GetPaymentAccountResponse> {
            return localVarFp.getPaymentAccount(companyId, paymentAccountId, fields, fieldset, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the specified payment method.
         * @summary Get Payment Method
         * @param {number} companyId The ID of the company.
         * @param {number} paymentMethodId The Referred Payment Method Id.
         * @param {string} [fields] List of comma-separated fields.
         * @param {'basic' | 'detailed'} [fieldset] Name of the fieldset.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentMethod(companyId: number, paymentMethodId: number, fields?: string, fieldset?: 'basic' | 'detailed', options?: any): AxiosPromise<GetPaymentMethodResponse> {
            return localVarFp.getPaymentMethod(companyId, paymentMethodId, fields, fieldset, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the specified vat type.
         * @summary Get Vat Type
         * @param {number} companyId The ID of the company.
         * @param {number} vatTypeId The Referred Vat Type Id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVatType(companyId: number, vatTypeId: number, options?: any): AxiosPromise<GetVatTypeResponse> {
            return localVarFp.getVatType(companyId, vatTypeId, options).then((request) => request(axios, basePath));
        },
        /**
         * Modifies the specified payment account.
         * @summary Modify Payment Account
         * @param {number} companyId The ID of the company.
         * @param {number} paymentAccountId The Referred Payment Account Id.
         * @param {ModifyPaymentAccountRequest} [modifyPaymentAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyPaymentAccount(companyId: number, paymentAccountId: number, modifyPaymentAccountRequest?: ModifyPaymentAccountRequest, options?: any): AxiosPromise<ModifyPaymentAccountResponse> {
            return localVarFp.modifyPaymentAccount(companyId, paymentAccountId, modifyPaymentAccountRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Modifies the specified payment method.
         * @summary Modify Payment Method
         * @param {number} companyId The ID of the company.
         * @param {number} paymentMethodId The Referred Payment Method Id.
         * @param {ModifyPaymentMethodRequest} [modifyPaymentMethodRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyPaymentMethod(companyId: number, paymentMethodId: number, modifyPaymentMethodRequest?: ModifyPaymentMethodRequest, options?: any): AxiosPromise<ModifyPaymentMethodResponse> {
            return localVarFp.modifyPaymentMethod(companyId, paymentMethodId, modifyPaymentMethodRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Modifies the specified vat type.
         * @summary Modify Vat Type
         * @param {number} companyId The ID of the company.
         * @param {number} vatTypeId The Referred Vat Type Id.
         * @param {ModifyVatTypeRequest} [modifyVatTypeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyVatType(companyId: number, vatTypeId: number, modifyVatTypeRequest?: ModifyVatTypeRequest, options?: any): AxiosPromise<ModifyVatTypeResponse> {
            return localVarFp.modifyVatType(companyId, vatTypeId, modifyVatTypeRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SettingsApi - interface
 * @export
 * @interface SettingsApi
 */
export interface SettingsApiInterface {
    /**
     * Creates a new payment account.
     * @summary Create Payment Account
     * @param {number} companyId The ID of the company.
     * @param {CreatePaymentAccountRequest} [createPaymentAccountRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApiInterface
     */
    createPaymentAccount(companyId: number, createPaymentAccountRequest?: CreatePaymentAccountRequest, options?: AxiosRequestConfig): AxiosPromise<CreatePaymentAccountResponse>;

    /**
     * Creates a new payment method.
     * @summary Create Payment Method
     * @param {number} companyId The ID of the company.
     * @param {CreatePaymentMethodRequest} [createPaymentMethodRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApiInterface
     */
    createPaymentMethod(companyId: number, createPaymentMethodRequest?: CreatePaymentMethodRequest, options?: AxiosRequestConfig): AxiosPromise<CreatePaymentMethodResponse>;

    /**
     * Creates a vat type.
     * @summary Create Vat Type
     * @param {number} companyId The ID of the company.
     * @param {CreateVatTypeRequest} [createVatTypeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApiInterface
     */
    createVatType(companyId: number, createVatTypeRequest?: CreateVatTypeRequest, options?: AxiosRequestConfig): AxiosPromise<CreateVatTypeResponse>;

    /**
     * Deletes the specified payment account.
     * @summary Delete Payment Account
     * @param {number} companyId The ID of the company.
     * @param {number} paymentAccountId The Referred Payment Account Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApiInterface
     */
    deletePaymentAccount(companyId: number, paymentAccountId: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Deletes the specified payment method.
     * @summary Delete Payment Method
     * @param {number} companyId The ID of the company.
     * @param {number} paymentMethodId The Referred Payment Method Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApiInterface
     */
    deletePaymentMethod(companyId: number, paymentMethodId: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Deletes the specified vat type.
     * @summary Delete Vat Type
     * @param {number} companyId The ID of the company.
     * @param {number} vatTypeId The Referred Vat Type Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApiInterface
     */
    deleteVatType(companyId: number, vatTypeId: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Gets the specified payment account.
     * @summary Get Payment Account
     * @param {number} companyId The ID of the company.
     * @param {number} paymentAccountId The Referred Payment Account Id.
     * @param {string} [fields] List of comma-separated fields.
     * @param {'basic' | 'detailed'} [fieldset] Name of the fieldset.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApiInterface
     */
    getPaymentAccount(companyId: number, paymentAccountId: number, fields?: string, fieldset?: 'basic' | 'detailed', options?: AxiosRequestConfig): AxiosPromise<GetPaymentAccountResponse>;

    /**
     * Gets the specified payment method.
     * @summary Get Payment Method
     * @param {number} companyId The ID of the company.
     * @param {number} paymentMethodId The Referred Payment Method Id.
     * @param {string} [fields] List of comma-separated fields.
     * @param {'basic' | 'detailed'} [fieldset] Name of the fieldset.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApiInterface
     */
    getPaymentMethod(companyId: number, paymentMethodId: number, fields?: string, fieldset?: 'basic' | 'detailed', options?: AxiosRequestConfig): AxiosPromise<GetPaymentMethodResponse>;

    /**
     * Gets the specified vat type.
     * @summary Get Vat Type
     * @param {number} companyId The ID of the company.
     * @param {number} vatTypeId The Referred Vat Type Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApiInterface
     */
    getVatType(companyId: number, vatTypeId: number, options?: AxiosRequestConfig): AxiosPromise<GetVatTypeResponse>;

    /**
     * Modifies the specified payment account.
     * @summary Modify Payment Account
     * @param {number} companyId The ID of the company.
     * @param {number} paymentAccountId The Referred Payment Account Id.
     * @param {ModifyPaymentAccountRequest} [modifyPaymentAccountRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApiInterface
     */
    modifyPaymentAccount(companyId: number, paymentAccountId: number, modifyPaymentAccountRequest?: ModifyPaymentAccountRequest, options?: AxiosRequestConfig): AxiosPromise<ModifyPaymentAccountResponse>;

    /**
     * Modifies the specified payment method.
     * @summary Modify Payment Method
     * @param {number} companyId The ID of the company.
     * @param {number} paymentMethodId The Referred Payment Method Id.
     * @param {ModifyPaymentMethodRequest} [modifyPaymentMethodRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApiInterface
     */
    modifyPaymentMethod(companyId: number, paymentMethodId: number, modifyPaymentMethodRequest?: ModifyPaymentMethodRequest, options?: AxiosRequestConfig): AxiosPromise<ModifyPaymentMethodResponse>;

    /**
     * Modifies the specified vat type.
     * @summary Modify Vat Type
     * @param {number} companyId The ID of the company.
     * @param {number} vatTypeId The Referred Vat Type Id.
     * @param {ModifyVatTypeRequest} [modifyVatTypeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApiInterface
     */
    modifyVatType(companyId: number, vatTypeId: number, modifyVatTypeRequest?: ModifyVatTypeRequest, options?: AxiosRequestConfig): AxiosPromise<ModifyVatTypeResponse>;

}

/**
 * SettingsApi - object-oriented interface
 * @export
 * @class SettingsApi
 * @extends {BaseAPI}
 */
export class SettingsApi extends BaseAPI implements SettingsApiInterface {
    /**
     * Creates a new payment account.
     * @summary Create Payment Account
     * @param {number} companyId The ID of the company.
     * @param {CreatePaymentAccountRequest} [createPaymentAccountRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public createPaymentAccount(companyId: number, createPaymentAccountRequest?: CreatePaymentAccountRequest, options?: AxiosRequestConfig) {
        return SettingsApiFp(this.configuration).createPaymentAccount(companyId, createPaymentAccountRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new payment method.
     * @summary Create Payment Method
     * @param {number} companyId The ID of the company.
     * @param {CreatePaymentMethodRequest} [createPaymentMethodRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public createPaymentMethod(companyId: number, createPaymentMethodRequest?: CreatePaymentMethodRequest, options?: AxiosRequestConfig) {
        return SettingsApiFp(this.configuration).createPaymentMethod(companyId, createPaymentMethodRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a vat type.
     * @summary Create Vat Type
     * @param {number} companyId The ID of the company.
     * @param {CreateVatTypeRequest} [createVatTypeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public createVatType(companyId: number, createVatTypeRequest?: CreateVatTypeRequest, options?: AxiosRequestConfig) {
        return SettingsApiFp(this.configuration).createVatType(companyId, createVatTypeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes the specified payment account.
     * @summary Delete Payment Account
     * @param {number} companyId The ID of the company.
     * @param {number} paymentAccountId The Referred Payment Account Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public deletePaymentAccount(companyId: number, paymentAccountId: number, options?: AxiosRequestConfig) {
        return SettingsApiFp(this.configuration).deletePaymentAccount(companyId, paymentAccountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes the specified payment method.
     * @summary Delete Payment Method
     * @param {number} companyId The ID of the company.
     * @param {number} paymentMethodId The Referred Payment Method Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public deletePaymentMethod(companyId: number, paymentMethodId: number, options?: AxiosRequestConfig) {
        return SettingsApiFp(this.configuration).deletePaymentMethod(companyId, paymentMethodId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes the specified vat type.
     * @summary Delete Vat Type
     * @param {number} companyId The ID of the company.
     * @param {number} vatTypeId The Referred Vat Type Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public deleteVatType(companyId: number, vatTypeId: number, options?: AxiosRequestConfig) {
        return SettingsApiFp(this.configuration).deleteVatType(companyId, vatTypeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the specified payment account.
     * @summary Get Payment Account
     * @param {number} companyId The ID of the company.
     * @param {number} paymentAccountId The Referred Payment Account Id.
     * @param {string} [fields] List of comma-separated fields.
     * @param {'basic' | 'detailed'} [fieldset] Name of the fieldset.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public getPaymentAccount(companyId: number, paymentAccountId: number, fields?: string, fieldset?: 'basic' | 'detailed', options?: AxiosRequestConfig) {
        return SettingsApiFp(this.configuration).getPaymentAccount(companyId, paymentAccountId, fields, fieldset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the specified payment method.
     * @summary Get Payment Method
     * @param {number} companyId The ID of the company.
     * @param {number} paymentMethodId The Referred Payment Method Id.
     * @param {string} [fields] List of comma-separated fields.
     * @param {'basic' | 'detailed'} [fieldset] Name of the fieldset.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public getPaymentMethod(companyId: number, paymentMethodId: number, fields?: string, fieldset?: 'basic' | 'detailed', options?: AxiosRequestConfig) {
        return SettingsApiFp(this.configuration).getPaymentMethod(companyId, paymentMethodId, fields, fieldset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the specified vat type.
     * @summary Get Vat Type
     * @param {number} companyId The ID of the company.
     * @param {number} vatTypeId The Referred Vat Type Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public getVatType(companyId: number, vatTypeId: number, options?: AxiosRequestConfig) {
        return SettingsApiFp(this.configuration).getVatType(companyId, vatTypeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modifies the specified payment account.
     * @summary Modify Payment Account
     * @param {number} companyId The ID of the company.
     * @param {number} paymentAccountId The Referred Payment Account Id.
     * @param {ModifyPaymentAccountRequest} [modifyPaymentAccountRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public modifyPaymentAccount(companyId: number, paymentAccountId: number, modifyPaymentAccountRequest?: ModifyPaymentAccountRequest, options?: AxiosRequestConfig) {
        return SettingsApiFp(this.configuration).modifyPaymentAccount(companyId, paymentAccountId, modifyPaymentAccountRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modifies the specified payment method.
     * @summary Modify Payment Method
     * @param {number} companyId The ID of the company.
     * @param {number} paymentMethodId The Referred Payment Method Id.
     * @param {ModifyPaymentMethodRequest} [modifyPaymentMethodRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public modifyPaymentMethod(companyId: number, paymentMethodId: number, modifyPaymentMethodRequest?: ModifyPaymentMethodRequest, options?: AxiosRequestConfig) {
        return SettingsApiFp(this.configuration).modifyPaymentMethod(companyId, paymentMethodId, modifyPaymentMethodRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modifies the specified vat type.
     * @summary Modify Vat Type
     * @param {number} companyId The ID of the company.
     * @param {number} vatTypeId The Referred Vat Type Id.
     * @param {ModifyVatTypeRequest} [modifyVatTypeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public modifyVatType(companyId: number, vatTypeId: number, modifyVatTypeRequest?: ModifyVatTypeRequest, options?: AxiosRequestConfig) {
        return SettingsApiFp(this.configuration).modifyVatType(companyId, vatTypeId, modifyVatTypeRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
