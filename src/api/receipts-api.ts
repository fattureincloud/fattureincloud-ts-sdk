/* tslint:disable */
/* eslint-disable */
/**
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.31
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
import FormData from 'form-data'
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../../base';
// @ts-ignore
import { CreateReceiptRequest } from '../../src/models';
// @ts-ignore
import { CreateReceiptResponse } from '../../src/models';
// @ts-ignore
import { GetReceiptPreCreateInfoResponse } from '../../src/models';
// @ts-ignore
import { GetReceiptResponse } from '../../src/models';
// @ts-ignore
import { GetReceiptsMonthlyTotalsResponse } from '../../src/models';
// @ts-ignore
import { ListReceiptsResponse } from '../../src/models';
// @ts-ignore
import { ModifyReceiptRequest } from '../../src/models';
// @ts-ignore
import { ModifyReceiptResponse } from '../../src/models';
/**
 * ReceiptsApi - axios parameter creator
 * @export
 */
export const ReceiptsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new receipt.
         * @summary Create Receipt
         * @param {number} companyId The ID of the company.
         * @param {CreateReceiptRequest} [createReceiptRequest] The Receipt to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReceipt: async (companyId: number, createReceiptRequest?: CreateReceiptRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('createReceipt', 'companyId', companyId)
            const localVarPath = `/c/{company_id}/receipts`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", ["receipts:a"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['User-Agent'] = 'FattureInCloud/2.0.13/TypeScript-SDK';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createReceiptRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the specified receipt.
         * @summary Delete Receipt
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReceipt: async (companyId: number, documentId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteReceipt', 'companyId', companyId)
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('deleteReceipt', 'documentId', documentId)
            const localVarPath = `/c/{company_id}/receipts/{document_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"document_id"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", ["receipts:a"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the specified receipt.
         * @summary Get Receipt
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {string} [fields] List of comma-separated fields.
         * @param {GetReceiptFieldsetEnum} [fieldset] Name of the fieldset.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReceipt: async (companyId: number, documentId: number, fields?: string, fieldset?: GetReceiptFieldsetEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getReceipt', 'companyId', companyId)
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('getReceipt', 'documentId', documentId)
            const localVarPath = `/c/{company_id}/receipts/{document_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"document_id"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", ["receipts:r"], configuration)

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (fieldset !== undefined) {
                localVarQueryParameter['fieldset'] = fieldset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the information useful while creating a new receipt.
         * @summary Get Receipt Pre-Create Info
         * @param {number} companyId The ID of the company.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReceiptPreCreateInfo: async (companyId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getReceiptPreCreateInfo', 'companyId', companyId)
            const localVarPath = `/c/{company_id}/receipts/info`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", ["receipts:r"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the monthly totals by year and receipt type.
         * @summary Get Receipts Monthly Totals
         * @param {number} companyId The ID of the company.
         * @param {GetReceiptsMonthlyTotalsTypeEnum} type Receipt Type
         * @param {string} year Year for which you want monthly totals
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReceiptsMonthlyTotals: async (companyId: number, type: GetReceiptsMonthlyTotalsTypeEnum, year: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getReceiptsMonthlyTotals', 'companyId', companyId)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('getReceiptsMonthlyTotals', 'type', type)
            // verify required parameter 'year' is not null or undefined
            assertParamExists('getReceiptsMonthlyTotals', 'year', year)
            const localVarPath = `/c/{company_id}/receipts/monthly_totals`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", ["receipts:r"], configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the receipts.
         * @summary List Receipts
         * @param {number} companyId The ID of the company.
         * @param {string} [fields] List of comma-separated fields.
         * @param {ListReceiptsFieldsetEnum} [fieldset] Name of the fieldset.
         * @param {number} [page] The page to retrieve.
         * @param {number} [perPage] The size of the page.
         * @param {string} [sort] List of comma-separated fields for result sorting (minus for desc sorting).
         * @param {string} [q] Query for filtering the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listReceipts: async (companyId: number, fields?: string, fieldset?: ListReceiptsFieldsetEnum, page?: number, perPage?: number, sort?: string, q?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listReceipts', 'companyId', companyId)
            const localVarPath = `/c/{company_id}/receipts`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", ["receipts:r"], configuration)

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (fieldset !== undefined) {
                localVarQueryParameter['fieldset'] = fieldset;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modifies the specified receipt.
         * @summary Modify Receipt
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {ModifyReceiptRequest} [modifyReceiptRequest] Modified receipt.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyReceipt: async (companyId: number, documentId: number, modifyReceiptRequest?: ModifyReceiptRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('modifyReceipt', 'companyId', companyId)
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('modifyReceipt', 'documentId', documentId)
            const localVarPath = `/c/{company_id}/receipts/{document_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"document_id"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", ["receipts:a"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['User-Agent'] = 'FattureInCloud/2.0.13/TypeScript-SDK';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyReceiptRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReceiptsApi - functional programming interface
 * @export
 */
export const ReceiptsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReceiptsApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new receipt.
         * @summary Create Receipt
         * @param {number} companyId The ID of the company.
         * @param {CreateReceiptRequest} [createReceiptRequest] The Receipt to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createReceipt(companyId: number, createReceiptRequest?: CreateReceiptRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateReceiptResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createReceipt(companyId, createReceiptRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ReceiptsApi.createReceipt']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Deletes the specified receipt.
         * @summary Delete Receipt
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteReceipt(companyId: number, documentId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteReceipt(companyId, documentId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ReceiptsApi.deleteReceipt']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Gets the specified receipt.
         * @summary Get Receipt
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {string} [fields] List of comma-separated fields.
         * @param {GetReceiptFieldsetEnum} [fieldset] Name of the fieldset.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReceipt(companyId: number, documentId: number, fields?: string, fieldset?: GetReceiptFieldsetEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetReceiptResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReceipt(companyId, documentId, fields, fieldset, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ReceiptsApi.getReceipt']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Retrieves the information useful while creating a new receipt.
         * @summary Get Receipt Pre-Create Info
         * @param {number} companyId The ID of the company.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReceiptPreCreateInfo(companyId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetReceiptPreCreateInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReceiptPreCreateInfo(companyId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ReceiptsApi.getReceiptPreCreateInfo']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Returns the monthly totals by year and receipt type.
         * @summary Get Receipts Monthly Totals
         * @param {number} companyId The ID of the company.
         * @param {GetReceiptsMonthlyTotalsTypeEnum} type Receipt Type
         * @param {string} year Year for which you want monthly totals
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReceiptsMonthlyTotals(companyId: number, type: GetReceiptsMonthlyTotalsTypeEnum, year: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetReceiptsMonthlyTotalsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReceiptsMonthlyTotals(companyId, type, year, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ReceiptsApi.getReceiptsMonthlyTotals']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Lists the receipts.
         * @summary List Receipts
         * @param {number} companyId The ID of the company.
         * @param {string} [fields] List of comma-separated fields.
         * @param {ListReceiptsFieldsetEnum} [fieldset] Name of the fieldset.
         * @param {number} [page] The page to retrieve.
         * @param {number} [perPage] The size of the page.
         * @param {string} [sort] List of comma-separated fields for result sorting (minus for desc sorting).
         * @param {string} [q] Query for filtering the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listReceipts(companyId: number, fields?: string, fieldset?: ListReceiptsFieldsetEnum, page?: number, perPage?: number, sort?: string, q?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListReceiptsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listReceipts(companyId, fields, fieldset, page, perPage, sort, q, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ReceiptsApi.listReceipts']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Modifies the specified receipt.
         * @summary Modify Receipt
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {ModifyReceiptRequest} [modifyReceiptRequest] Modified receipt.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyReceipt(companyId: number, documentId: number, modifyReceiptRequest?: ModifyReceiptRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyReceiptResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyReceipt(companyId, documentId, modifyReceiptRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ReceiptsApi.modifyReceipt']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ReceiptsApi - factory interface
 * @export
 */
export const ReceiptsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReceiptsApiFp(configuration)
    return {
        /**
         * Creates a new receipt.
         * @summary Create Receipt
         * @param {number} companyId The ID of the company.
         * @param {CreateReceiptRequest} [createReceiptRequest] The Receipt to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReceipt(companyId: number, createReceiptRequest?: CreateReceiptRequest, options?: any): AxiosPromise<CreateReceiptResponse> {
            return localVarFp.createReceipt(companyId, createReceiptRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes the specified receipt.
         * @summary Delete Receipt
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReceipt(companyId: number, documentId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteReceipt(companyId, documentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the specified receipt.
         * @summary Get Receipt
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {string} [fields] List of comma-separated fields.
         * @param {GetReceiptFieldsetEnum} [fieldset] Name of the fieldset.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReceipt(companyId: number, documentId: number, fields?: string, fieldset?: GetReceiptFieldsetEnum, options?: any): AxiosPromise<GetReceiptResponse> {
            return localVarFp.getReceipt(companyId, documentId, fields, fieldset, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the information useful while creating a new receipt.
         * @summary Get Receipt Pre-Create Info
         * @param {number} companyId The ID of the company.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReceiptPreCreateInfo(companyId: number, options?: any): AxiosPromise<GetReceiptPreCreateInfoResponse> {
            return localVarFp.getReceiptPreCreateInfo(companyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the monthly totals by year and receipt type.
         * @summary Get Receipts Monthly Totals
         * @param {number} companyId The ID of the company.
         * @param {GetReceiptsMonthlyTotalsTypeEnum} type Receipt Type
         * @param {string} year Year for which you want monthly totals
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReceiptsMonthlyTotals(companyId: number, type: GetReceiptsMonthlyTotalsTypeEnum, year: string, options?: any): AxiosPromise<GetReceiptsMonthlyTotalsResponse> {
            return localVarFp.getReceiptsMonthlyTotals(companyId, type, year, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists the receipts.
         * @summary List Receipts
         * @param {number} companyId The ID of the company.
         * @param {string} [fields] List of comma-separated fields.
         * @param {ListReceiptsFieldsetEnum} [fieldset] Name of the fieldset.
         * @param {number} [page] The page to retrieve.
         * @param {number} [perPage] The size of the page.
         * @param {string} [sort] List of comma-separated fields for result sorting (minus for desc sorting).
         * @param {string} [q] Query for filtering the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listReceipts(companyId: number, fields?: string, fieldset?: ListReceiptsFieldsetEnum, page?: number, perPage?: number, sort?: string, q?: string, options?: any): AxiosPromise<ListReceiptsResponse> {
            return localVarFp.listReceipts(companyId, fields, fieldset, page, perPage, sort, q, options).then((request) => request(axios, basePath));
        },
        /**
         * Modifies the specified receipt.
         * @summary Modify Receipt
         * @param {number} companyId The ID of the company.
         * @param {number} documentId The ID of the document.
         * @param {ModifyReceiptRequest} [modifyReceiptRequest] Modified receipt.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyReceipt(companyId: number, documentId: number, modifyReceiptRequest?: ModifyReceiptRequest, options?: any): AxiosPromise<ModifyReceiptResponse> {
            return localVarFp.modifyReceipt(companyId, documentId, modifyReceiptRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReceiptsApi - interface
 * @export
 * @interface ReceiptsApi
 */
export interface ReceiptsApiInterface {
    /**
     * Creates a new receipt.
     * @summary Create Receipt
     * @param {number} companyId The ID of the company.
     * @param {CreateReceiptRequest} [createReceiptRequest] The Receipt to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceiptsApiInterface
     */
    createReceipt(companyId: number, createReceiptRequest?: CreateReceiptRequest, options?: AxiosRequestConfig): AxiosPromise<CreateReceiptResponse>;

    /**
     * Deletes the specified receipt.
     * @summary Delete Receipt
     * @param {number} companyId The ID of the company.
     * @param {number} documentId The ID of the document.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceiptsApiInterface
     */
    deleteReceipt(companyId: number, documentId: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Gets the specified receipt.
     * @summary Get Receipt
     * @param {number} companyId The ID of the company.
     * @param {number} documentId The ID of the document.
     * @param {string} [fields] List of comma-separated fields.
     * @param {GetReceiptFieldsetEnum} [fieldset] Name of the fieldset.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceiptsApiInterface
     */
    getReceipt(companyId: number, documentId: number, fields?: string, fieldset?: GetReceiptFieldsetEnum, options?: AxiosRequestConfig): AxiosPromise<GetReceiptResponse>;

    /**
     * Retrieves the information useful while creating a new receipt.
     * @summary Get Receipt Pre-Create Info
     * @param {number} companyId The ID of the company.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceiptsApiInterface
     */
    getReceiptPreCreateInfo(companyId: number, options?: AxiosRequestConfig): AxiosPromise<GetReceiptPreCreateInfoResponse>;

    /**
     * Returns the monthly totals by year and receipt type.
     * @summary Get Receipts Monthly Totals
     * @param {number} companyId The ID of the company.
     * @param {GetReceiptsMonthlyTotalsTypeEnum} type Receipt Type
     * @param {string} year Year for which you want monthly totals
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceiptsApiInterface
     */
    getReceiptsMonthlyTotals(companyId: number, type: GetReceiptsMonthlyTotalsTypeEnum, year: string, options?: AxiosRequestConfig): AxiosPromise<GetReceiptsMonthlyTotalsResponse>;

    /**
     * Lists the receipts.
     * @summary List Receipts
     * @param {number} companyId The ID of the company.
     * @param {string} [fields] List of comma-separated fields.
     * @param {ListReceiptsFieldsetEnum} [fieldset] Name of the fieldset.
     * @param {number} [page] The page to retrieve.
     * @param {number} [perPage] The size of the page.
     * @param {string} [sort] List of comma-separated fields for result sorting (minus for desc sorting).
     * @param {string} [q] Query for filtering the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceiptsApiInterface
     */
    listReceipts(companyId: number, fields?: string, fieldset?: ListReceiptsFieldsetEnum, page?: number, perPage?: number, sort?: string, q?: string, options?: AxiosRequestConfig): AxiosPromise<ListReceiptsResponse>;

    /**
     * Modifies the specified receipt.
     * @summary Modify Receipt
     * @param {number} companyId The ID of the company.
     * @param {number} documentId The ID of the document.
     * @param {ModifyReceiptRequest} [modifyReceiptRequest] Modified receipt.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceiptsApiInterface
     */
    modifyReceipt(companyId: number, documentId: number, modifyReceiptRequest?: ModifyReceiptRequest, options?: AxiosRequestConfig): AxiosPromise<ModifyReceiptResponse>;

}

/**
 * ReceiptsApi - object-oriented interface
 * @export
 * @class ReceiptsApi
 * @extends {BaseAPI}
 */
export class ReceiptsApi extends BaseAPI implements ReceiptsApiInterface {
    /**
     * Creates a new receipt.
     * @summary Create Receipt
     * @param {number} companyId The ID of the company.
     * @param {CreateReceiptRequest} [createReceiptRequest] The Receipt to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceiptsApi
     */
    public createReceipt(companyId: number, createReceiptRequest?: CreateReceiptRequest, options?: AxiosRequestConfig) {
        return ReceiptsApiFp(this.configuration).createReceipt(companyId, createReceiptRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes the specified receipt.
     * @summary Delete Receipt
     * @param {number} companyId The ID of the company.
     * @param {number} documentId The ID of the document.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceiptsApi
     */
    public deleteReceipt(companyId: number, documentId: number, options?: AxiosRequestConfig) {
        return ReceiptsApiFp(this.configuration).deleteReceipt(companyId, documentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the specified receipt.
     * @summary Get Receipt
     * @param {number} companyId The ID of the company.
     * @param {number} documentId The ID of the document.
     * @param {string} [fields] List of comma-separated fields.
     * @param {GetReceiptFieldsetEnum} [fieldset] Name of the fieldset.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceiptsApi
     */
    public getReceipt(companyId: number, documentId: number, fields?: string, fieldset?: GetReceiptFieldsetEnum, options?: AxiosRequestConfig) {
        return ReceiptsApiFp(this.configuration).getReceipt(companyId, documentId, fields, fieldset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the information useful while creating a new receipt.
     * @summary Get Receipt Pre-Create Info
     * @param {number} companyId The ID of the company.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceiptsApi
     */
    public getReceiptPreCreateInfo(companyId: number, options?: AxiosRequestConfig) {
        return ReceiptsApiFp(this.configuration).getReceiptPreCreateInfo(companyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the monthly totals by year and receipt type.
     * @summary Get Receipts Monthly Totals
     * @param {number} companyId The ID of the company.
     * @param {GetReceiptsMonthlyTotalsTypeEnum} type Receipt Type
     * @param {string} year Year for which you want monthly totals
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceiptsApi
     */
    public getReceiptsMonthlyTotals(companyId: number, type: GetReceiptsMonthlyTotalsTypeEnum, year: string, options?: AxiosRequestConfig) {
        return ReceiptsApiFp(this.configuration).getReceiptsMonthlyTotals(companyId, type, year, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists the receipts.
     * @summary List Receipts
     * @param {number} companyId The ID of the company.
     * @param {string} [fields] List of comma-separated fields.
     * @param {ListReceiptsFieldsetEnum} [fieldset] Name of the fieldset.
     * @param {number} [page] The page to retrieve.
     * @param {number} [perPage] The size of the page.
     * @param {string} [sort] List of comma-separated fields for result sorting (minus for desc sorting).
     * @param {string} [q] Query for filtering the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceiptsApi
     */
    public listReceipts(companyId: number, fields?: string, fieldset?: ListReceiptsFieldsetEnum, page?: number, perPage?: number, sort?: string, q?: string, options?: AxiosRequestConfig) {
        return ReceiptsApiFp(this.configuration).listReceipts(companyId, fields, fieldset, page, perPage, sort, q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modifies the specified receipt.
     * @summary Modify Receipt
     * @param {number} companyId The ID of the company.
     * @param {number} documentId The ID of the document.
     * @param {ModifyReceiptRequest} [modifyReceiptRequest] Modified receipt.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceiptsApi
     */
    public modifyReceipt(companyId: number, documentId: number, modifyReceiptRequest?: ModifyReceiptRequest, options?: AxiosRequestConfig) {
        return ReceiptsApiFp(this.configuration).modifyReceipt(companyId, documentId, modifyReceiptRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetReceiptFieldsetEnum = {
    Basic: 'basic',
    Detailed: 'detailed'
} as const;
export type GetReceiptFieldsetEnum = typeof GetReceiptFieldsetEnum[keyof typeof GetReceiptFieldsetEnum];
/**
 * @export
 */
export const GetReceiptsMonthlyTotalsTypeEnum = {
    SalesReceipt: 'sales_receipt',
    TillReceipt: 'till_receipt'
} as const;
export type GetReceiptsMonthlyTotalsTypeEnum = typeof GetReceiptsMonthlyTotalsTypeEnum[keyof typeof GetReceiptsMonthlyTotalsTypeEnum];
/**
 * @export
 */
export const ListReceiptsFieldsetEnum = {
    Basic: 'basic',
    Detailed: 'detailed'
} as const;
export type ListReceiptsFieldsetEnum = typeof ListReceiptsFieldsetEnum[keyof typeof ListReceiptsFieldsetEnum];
