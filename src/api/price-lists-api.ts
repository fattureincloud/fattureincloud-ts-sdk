/* tslint:disable */
/* eslint-disable */
/**
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
import FormData from 'form-data'
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../../base';
// @ts-ignore
import type { GetPriceListItemsResponse } from '../../src/models';
// @ts-ignore
import type { ListPriceListsResponse } from '../../src/models';
/**
 * PriceListsApi - axios parameter creator
 * @export
 */
export const PriceListsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves all the Items of a PriceList
         * @summary Get PriceList Items List
         * @param {number} companyId The ID of the company.
         * @param {string} priceListId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPriceListItems: async (companyId: number, priceListId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getPriceListItems', 'companyId', companyId)
            // verify required parameter 'priceListId' is not null or undefined
            assertParamExists('getPriceListItems', 'priceListId', priceListId)
            const localVarPath = `/c/{company_id}/price_lists/{price_list_id}/items`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)))
                .replace(`{${"price_list_id"}}`, encodeURIComponent(String(priceListId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all price lists of the company
         * @summary Get PriceLists
         * @param {number} companyId The ID of the company.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPriceLists: async (companyId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getPriceLists', 'companyId', companyId)
            const localVarPath = `/c/{company_id}/price_lists`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2AuthenticationCodeFlow required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2AuthenticationCodeFlow", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PriceListsApi - functional programming interface
 * @export
 */
export const PriceListsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PriceListsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves all the Items of a PriceList
         * @summary Get PriceList Items List
         * @param {number} companyId The ID of the company.
         * @param {string} priceListId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPriceListItems(companyId: number, priceListId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPriceListItemsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPriceListItems(companyId, priceListId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PriceListsApi.getPriceListItems']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves all price lists of the company
         * @summary Get PriceLists
         * @param {number} companyId The ID of the company.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPriceLists(companyId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListPriceListsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPriceLists(companyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PriceListsApi.getPriceLists']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PriceListsApi - factory interface
 * @export
 */
export const PriceListsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PriceListsApiFp(configuration)
    return {
        /**
         * Retrieves all the Items of a PriceList
         * @summary Get PriceList Items List
         * @param {number} companyId The ID of the company.
         * @param {string} priceListId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPriceListItems(companyId: number, priceListId: string, options?: RawAxiosRequestConfig): AxiosPromise<GetPriceListItemsResponse> {
            return localVarFp.getPriceListItems(companyId, priceListId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all price lists of the company
         * @summary Get PriceLists
         * @param {number} companyId The ID of the company.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPriceLists(companyId: number, options?: RawAxiosRequestConfig): AxiosPromise<ListPriceListsResponse> {
            return localVarFp.getPriceLists(companyId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PriceListsApi - interface
 * @export
 * @interface PriceListsApi
 */
export interface PriceListsApiInterface {
    /**
     * Retrieves all the Items of a PriceList
     * @summary Get PriceList Items List
     * @param {number} companyId The ID of the company.
     * @param {string} priceListId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PriceListsApiInterface
     */
    getPriceListItems(companyId: number, priceListId: string, options?: RawAxiosRequestConfig): AxiosPromise<GetPriceListItemsResponse>;
    /**
     * Retrieves all price lists of the company
     * @summary Get PriceLists
     * @param {number} companyId The ID of the company.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PriceListsApiInterface
     */
    getPriceLists(companyId: number, options?: RawAxiosRequestConfig): AxiosPromise<ListPriceListsResponse>;
}

/**
 * PriceListsApi - object-oriented interface
 * @export
 * @class PriceListsApi
 * @extends {BaseAPI}
 */
export class PriceListsApi extends BaseAPI implements PriceListsApiInterface {
    /**
     * Retrieves all the Items of a PriceList
     * @summary Get PriceList Items List
     * @param {number} companyId The ID of the company.
     * @param {string} priceListId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PriceListsApi
     */
    public getPriceListItems(companyId: number, priceListId: string, options?: RawAxiosRequestConfig) {
        return PriceListsApiFp(this.configuration).getPriceListItems(companyId, priceListId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves all price lists of the company
     * @summary Get PriceLists
     * @param {number} companyId The ID of the company.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PriceListsApi
     */
    public getPriceLists(companyId: number, options?: RawAxiosRequestConfig) {
        return PriceListsApiFp(this.configuration).getPriceLists(companyId, options).then((request) => request(this.axios, this.basePath));
    }
}

