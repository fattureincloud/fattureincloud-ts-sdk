/**
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.27
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import { expect } from 'chai'
import { WebhooksApi } from '../../src/api/webhooks-api'
import { CreateWebhooksSubscriptionRequest, CreateWebhooksSubscriptionResponse, GetWebhooksSubscriptionResponse, ListWebhooksSubscriptionsResponse, ModifyWebhooksSubscriptionRequest, ModifyWebhooksSubscriptionResponse } from '../../src/models'

const sandbox = require('sinon').createSandbox()

const instance = new WebhooksApi()

const createWebhooksSubscriptionResponseObj: CreateWebhooksSubscriptionResponse = { data: { id: 'SUB123', sink: 'https://endpoint.test', verified: true, types: ['it.fattureincloud.webhooks.cashbook.create'] }, warnings: ['error'] }
const createWebhooksSubscriptionStub = sandbox.stub(instance, 'createWebhooksSubscription').returns(createWebhooksSubscriptionResponseObj)

const deleteWebhooksSubscriptionResponseObj = {}
sandbox.stub(instance, 'deleteWebhooksSubscription').returns(deleteWebhooksSubscriptionResponseObj)

const getWebhooksSubscriptionResponseObj: GetWebhooksSubscriptionResponse = { data: { id: 'SUB123', sink: 'https://endpoint.test', verified: true, types: ['it.fattureincloud.webhooks.cashbook.create'] } }
sandbox.stub(instance, 'getWebhooksSubscription').returns(getWebhooksSubscriptionResponseObj)

const listWebhooksSubscriptionsResponseObj: ListWebhooksSubscriptionsResponse = { data: [{ id: 'SUB123', sink: 'https://endpoint.test', verified: true, types: ['it.fattureincloud.webhooks.cashbook.create'] }, { id: 'SUB1234', sink: 'https://endpoint.test', verified: true, types: ['it.fattureincloud.webhooks.cashbook.update'] }] }
sandbox.stub(instance, 'listWebhooksSubscriptions').returns(listWebhooksSubscriptionsResponseObj)

const modifyWebhooksSubscriptionResponseObj: ModifyWebhooksSubscriptionResponse = { data: { id: 'SUB123', sink: 'https://endpoint.test', verified: true, types: ['it.fattureincloud.webhooks.cashbook.create'] }, warnings: ['error'] }
const modifyWebhooksSubscriptionStub = sandbox.stub(instance, 'modifyWebhooksSubscription').returns(modifyWebhooksSubscriptionResponseObj)

// beforeEach(function () {

// })

describe('WebhooksApi', function () {
  describe('createWebhooksSubscription', function () {
    it('should call createWebhooksSubscription successfully', function (done) {
      const opts: CreateWebhooksSubscriptionRequest = { data: { sink: 'https://endpoint.test', types: ['it.fattureincloud.webhooks.cashbook.create'] } }
      const response = instance.createWebhooksSubscription(2, opts)
      const expectedJson = JSON.stringify(createWebhooksSubscriptionResponseObj)
      const actualJson = JSON.stringify(response)
      expect(actualJson).to.equal(expectedJson)
      expect(createWebhooksSubscriptionStub.getCall(0).args[1]).to.equal(opts)
      done()
    })
  })
  describe('deleteWebhooksSubscription', function () {
    it('should call deleteWebhooksSubscription successfully', function (done) {
      expect(1).to.equal(1)
      done()
    })
  })
  describe('getWebhooksSubscription', function () {
    it('should call getWebhooksSubscription successfully', function (done) {
      const response = instance.getWebhooksSubscription(2, 'SUB123')
      const expectedJson = JSON.stringify(getWebhooksSubscriptionResponseObj)
      const actualJson = JSON.stringify(response)
      expect(actualJson).to.equal(expectedJson)
      done()
    })
  })
  describe('listWebhooksSubscriptions', function () {
    it('should call listWebhooksSubscriptions successfully', function (done) {
      const response = instance.listWebhooksSubscriptions(2)
      const expectedJson = JSON.stringify(listWebhooksSubscriptionsResponseObj)
      const actualJson = JSON.stringify(response)
      expect(actualJson).to.equal(expectedJson)
      done()
    })
  })
  describe('modifyWebhooksSubscription', function () {
    it('should call modifyWebhooksSubscription successfully', function (done) {
      const opts: ModifyWebhooksSubscriptionRequest = { data: { sink: 'https://sasasa.com' } }
      const response = instance.modifyWebhooksSubscription(2, 'SUB12345', opts)
      const expectedJson = JSON.stringify(modifyWebhooksSubscriptionResponseObj)
      const actualJson = JSON.stringify(response)
      expect(actualJson).to.equal(expectedJson)
      expect(modifyWebhooksSubscriptionStub.getCall(0).args[2]).to.equal(opts)
      done()
    })
  })
})
